{"version":3,"file":"build.js","sourceRoot":"","sources":["../../src/utils/build.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAC;AAG9C,OAAO,EACL,qBAAqB,EAErB,WAAW,EACZ,MAAM,aAAa,CAAC;AACrB,OAAO,EAAE,QAAQ,EAAE,MAAM,oBAAoB,CAAC;AAC9C,OAAO,EAAE,oBAAoB,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,YAAY,CAAC;AAM/D,MAAM,CAAC,KAAK,UAAU,eAAe,CACnC,QAA6B,EAC7B,MAA0B,EAC1B,MAAc,EACd,OAAgC;IAEhC,MAAM,cAAc,GAAG,qBAAqB,CAAC,QAAQ,CACnD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CACpC,CAAC;IACF,cAAc,IAAI,OAAO,EAAE,KAAK,IAAI,WAAW,EAAE,CAAC;IAClD,MAAM,EAAE,eAAe,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC,WAAW,CAAC;IACvD,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;IAEpC,IAAI;QACF,MAAM,QAAQ,EAAE,CAAC;KAClB;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,CAAC,KAAK,CAAC,YAAY,QAAQ,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;QACnD,OAAO;KACR;IAED,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC,CAAC;IAC9D,MAAM,mBAAmB,GAAG,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAC9E,MAAM,CAAC,IAAI,CACT,sBAAsB,IAAI,CACxB,KAAK,CAAC,GAAG,WAAW,IAAI,CAAC,CAC1B,IAAI,mBAAmB,yBAAyB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,CAC7E,CAAC;AACJ,CAAC","sourcesContent":["import { performance } from 'node:perf_hooks';\nimport { Logger } from './logger.js';\n\nimport {\n  FARM_TARGET_NODE_ENVS,\n  ResolvedUserConfig,\n  clearScreen\n} from '../index.js';\nimport { logError } from '../server/error.js';\nimport { PersistentCacheBrand, bold, green } from './color.js';\n\ninterface CompilerHandlerOptions {\n  clear?: boolean;\n}\n\nexport async function compilerHandler(\n  callback: () => Promise<void>,\n  config: ResolvedUserConfig,\n  logger: Logger,\n  options?: CompilerHandlerOptions\n) {\n  const IS_TARGET_NODE = FARM_TARGET_NODE_ENVS.includes(\n    config.compilation.output.targetEnv\n  );\n  IS_TARGET_NODE && options?.clear && clearScreen();\n  const { persistentCache, output } = config.compilation;\n  const startTime = performance.now();\n\n  try {\n    await callback();\n  } catch (error) {\n    logger.error(`Compiler ${logError(error, false)}`);\n    return;\n  }\n\n  const elapsedTime = Math.floor(performance.now() - startTime);\n  const persistentCacheText = persistentCache ? bold(PersistentCacheBrand) : '';\n  logger.info(\n    `Build completed in ${bold(\n      green(`${elapsedTime}ms`)\n    )} ${persistentCacheText} Resources emitted to ${bold(green(output.path))}.`\n  );\n}\n"]}
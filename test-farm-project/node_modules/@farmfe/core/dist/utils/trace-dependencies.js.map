{"version":3,"file":"trace-dependencies.js","sourceRoot":"","sources":["../../src/utils/trace-dependencies.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAChD,OAAO,EAAE,mBAAmB,EAAE,MAAM,YAAY,CAAC;AAGjD,OAAO,KAAK,EAAE,MAAM,SAAS,CAAC;AAG9B,SAAS,sBAAsB,CAAC,KAAa,EAAE,MAAc;IAC3D,MAAM,MAAM,GAAG,gCAAgC,CAAC,KAAK,CAAC,CAAC;IACvD,MAAM,CAAC,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAC;IAC/B,OAAO,IAAI,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACtC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,iBAAiB,CACrC,cAAsB,EACtB,MAAc;IAEd,IAAI;QACF,mCAAmC;QACnC,IACE,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,MAAM,EAAE,CAAC,EACxE;YACA,OAAO,EAAE,CAAC;SACX;QAED,MAAM,QAAQ,GAAG,sBAAsB,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;QAChE,MAAM,KAAK,GAAG,CAAC,MAAM,QAAQ,CAAC,iBAAiB,EAAE,CAAa,CAAC;QAC/D,OAAO,KAAK,CAAC;KACd;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,YAAY,GAAG,mBAAmB,CAAC,KAAK,CAAC,CAAC;QAChD,MAAM,KAAK,CAAC,+BAA+B,YAAY,EAAE,CAAC,CAAC;KAC5D;AACH,CAAC;AAED,SAAS,gCAAgC,CAAC,KAAa;IACrD,OAAO;QACL,MAAM,EAAE;YACN,KAAK,EAAE;gBACL,KAAK,EAAE,KAAK;aACb;YACD,OAAO,EAAE;gBACP,yBAAyB,EAAE,IAAI;aAChC;YACD,QAAQ,EAAE,CAAC,UAAU,CAAC;YACtB,SAAS,EAAE,KAAK;YAChB,SAAS,EAAE,KAAK;YAChB,eAAe,EAAE,KAAK;YACtB,MAAM,EAAE,KAAK;YACb,eAAe,EAAE,KAAK;SACvB;QACD,SAAS,EAAE;YACT;gBACE,IAAI,EAAE,4CAA4C;gBAClD,IAAI,EAAE;oBACJ,OAAO,EAAE;wBACP,aAAa,EAAE,CAAC,UAAU,CAAC;qBAC5B;oBACD,QAAQ,EAAE,GAAG,EAAE;wBACb,OAAO;4BACL,OAAO,EAAE,EAAE;4BACX,UAAU,EAAE,IAAI;yBACjB,CAAC;oBACJ,CAAC;iBACF;aACF;SACF;QACD,WAAW,EAAE,EAAE;KAChB,CAAC;AACJ,CAAC","sourcesContent":["import { Compiler } from '../compiler/index.js';\nimport { convertErrorMessage } from './error.js';\nimport { Logger } from './logger.js';\n\nimport * as fs from 'node:fs';\nimport type { Config } from '../types/binding.js';\n\nfunction createTraceDepCompiler(entry: string, logger: Logger) {\n  const config = getDefaultTraceDepCompilerConfig(entry);\n  config.config.progress = false;\n  return new Compiler(config, logger);\n}\n\nexport async function traceDependencies(\n  configFilePath: string,\n  logger: Logger\n): Promise<string[]> {\n  try {\n    // maybe not find config from local\n    if (\n      !(fs.existsSync(configFilePath) && fs.statSync(configFilePath).isFile())\n    ) {\n      return [];\n    }\n\n    const compiler = createTraceDepCompiler(configFilePath, logger);\n    const files = (await compiler.traceDependencies()) as string[];\n    return files;\n  } catch (error) {\n    const errorMessage = convertErrorMessage(error);\n    throw Error(`Error tracing dependencies: ${errorMessage}`);\n  }\n}\n\nfunction getDefaultTraceDepCompilerConfig(entry: string): Config {\n  return {\n    config: {\n      input: {\n        index: entry\n      },\n      resolve: {\n        autoExternalFailedResolve: true\n      },\n      external: ['^[^./].*'],\n      sourcemap: false,\n      presetEnv: false,\n      persistentCache: false,\n      minify: false,\n      lazyCompilation: false\n    },\n    jsPlugins: [\n      {\n        name: 'trace-dependencies-ignore-node-file-plugin',\n        load: {\n          filters: {\n            resolvedPaths: ['\\\\.node$']\n          },\n          executor: () => {\n            return {\n              content: '',\n              moduleType: 'js'\n            };\n          }\n        }\n      }\n    ],\n    rustPlugins: []\n  };\n}\n"]}
{"version":3,"file":"merge.js","sourceRoot":"","sources":["../../src/utils/merge.ts"],"names":[],"mappings":"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","sourcesContent":["import deepmerge, { Options } from 'deepmerge';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore ignore type check\nimport { isPlainObject } from 'is-plain-object';\nimport { isArray } from './share.js';\n\nfunction isValueSameDeep(target: any, source: any): boolean {\n  if (target === source) {\n    return true;\n  }\n\n  if (!isMergeableObject(target) || !isMergeableObject(source)) {\n    return false;\n  }\n\n  if (Object.keys(target).length !== Object.keys(source).length) {\n    return false;\n  }\n\n  for (const key in source) {\n    if (!isValueSameDeep(target[key], source[key])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isMergeableObject(obj: any) {\n  return isPlainObject(obj) || Array.isArray(obj);\n}\n\nconst arrayMerge: Options['arrayMerge'] = (target, source, options) => {\n  const destination = target.slice();\n\n  source.forEach((item, index) => {\n    if (typeof destination[index] === 'undefined') {\n      destination[index] = options.cloneUnlessOtherwiseSpecified(item, options);\n    } else if (!destination.find((dest) => isValueSameDeep(dest, item))) {\n      destination.push(item);\n    }\n  });\n\n  return destination.filter((item) => item !== undefined);\n};\n\nconst options = {\n  arrayMerge,\n  isMergeableObject\n};\n\nexport default function merge<T>(target: T, ...sources: Partial<T>[]): T {\n  let destination: any = { ...target };\n\n  for (const source of sources) {\n    if (!source) continue;\n\n    // should not preserve target and source\n    if (isPlainObject(destination) && isPlainObject(source)) {\n      for (const key of Object.keys(source)) {\n        const sourceValue = (source as any)[key];\n\n        if (sourceValue === undefined) {\n          continue;\n        } else if (\n          isMergeableObject(destination[key]) &&\n          isMergeableObject(sourceValue)\n        ) {\n          destination[key] = deepmerge(destination[key], sourceValue, options);\n        } else {\n          if (isPlainObject(sourceValue)) {\n            destination[key] = deepmerge({}, sourceValue, options);\n          } else if (isArray(sourceValue)) {\n            destination[key] = deepmerge([], sourceValue, options);\n          } else {\n            destination[key] = sourceValue;\n          }\n        }\n      }\n    } else {\n      destination = deepmerge(destination, source, options);\n    }\n  }\n\n  return destination;\n}\n"]}
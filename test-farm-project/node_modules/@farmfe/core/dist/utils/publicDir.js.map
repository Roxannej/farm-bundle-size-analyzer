{"version":3,"file":"publicDir.js","sourceRoot":"","sources":["../../src/utils/publicDir.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,IAAI,CAAC;AACpB,OAAO,IAAI,MAAM,MAAM,CAAC;AAExB,OAAO,EAAE,gCAAgC,EAAE,gBAAgB,EAAE,MAAM,WAAW,CAAC;AAC/E,OAAO,EAAE,iBAAiB,EAAE,MAAM,WAAW,CAAC;AAC9C,OAAO,EAAE,aAAa,EAAE,MAAM,YAAY,CAAC;AAC3C,OAAO,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAC;AAEpC,MAAM,cAAc,GAAG,IAAI,OAAO,EAA2B,CAAC;AAE9D,MAAM,CAAC,KAAK,UAAU,eAAe,CAAC,GAAW,EAAE,MAAkB;IACnE,sEAAsE;IACtE,uDAAuD;IACvD,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,CAAC;IAC7B,IAAI,CAAC,SAAS,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QAChC,OAAO;KACR;IACD,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;IAC9B,MAAM,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;IAC/B,MAAM,WAAW,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC;IAC3C,IAAI,WAAW,EAAE;QACf,OAAO,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC;YAC9B,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;YAC/C,CAAC,CAAC,SAAS,CAAC;KACf;IAED,MAAM,UAAU,GAAG,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC;IACjE,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,EAAE;QACxD,sCAAsC;QACtC,OAAO;KACR;IACD,OAAO,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC;AAC5D,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,eAAe,CACnC,MAAkB;IAElB,IAAI,SAAmB,CAAC;IACxB,IAAI;QACF,SAAS,GAAG,MAAM,gBAAgB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;KACtD;IAAC,OAAO,CAAC,EAAE;QACV,IAAI,CAAC,CAAC,IAAI,KAAK,gCAAgC,EAAE;YAC/C,OAAO;SACR;QACD,MAAM,CAAC,CAAC;KACT;IACD,MAAM,WAAW,GAAG,IAAI,GAAG,CACzB,SAAS,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CACrE,CAAC;IACF,cAAc,CAAC,GAAG,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;IACxC,OAAO,WAAW,CAAC;AACrB,CAAC;AAED,SAAS,cAAc,CAAC,MAAkB;IACxC,OAAO,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AACpC,CAAC","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport { UserConfig } from '../config/types.js';\nimport { ERR_SYMLINK_IN_RECURSIVE_READDIR, recursiveReaddir } from './file.js';\nimport { withTrailingSlash } from './path.js';\nimport { normalizePath } from './share.js';\nimport { cleanUrl } from './url.js';\n\nconst publicFilesMap = new WeakMap<UserConfig, Set<string>>();\n\nexport async function checkPublicFile(url: string, config: UserConfig) {\n  // note if the file is in /public, the resolver would have returned it\n  // as-is so it's not going to be a fully resolved path.\n  const { publicDir } = config;\n  if (!publicDir || url[0] !== '/') {\n    return;\n  }\n  await initPublicFiles(config);\n  const fileName = cleanUrl(url);\n  const publicFiles = getPublicFiles(config);\n  if (publicFiles) {\n    return publicFiles.has(fileName)\n      ? normalizePath(path.join(publicDir, fileName))\n      : undefined;\n  }\n\n  const publicFile = normalizePath(path.join(publicDir, fileName));\n  if (!publicFile.startsWith(withTrailingSlash(publicDir))) {\n    // can happen if URL starts with '../'\n    return;\n  }\n  return fs.existsSync(publicFile) ? publicFile : undefined;\n}\n\nexport async function initPublicFiles(\n  config: UserConfig\n): Promise<Set<string> | undefined> {\n  let fileNames: string[];\n  try {\n    fileNames = await recursiveReaddir(config.publicDir);\n  } catch (e) {\n    if (e.code === ERR_SYMLINK_IN_RECURSIVE_READDIR) {\n      return;\n    }\n    throw e;\n  }\n  const publicFiles = new Set(\n    fileNames.map((fileName) => fileName.slice(config.publicDir.length))\n  );\n  publicFilesMap.set(config, publicFiles);\n  return publicFiles;\n}\n\nfunction getPublicFiles(config: UserConfig): Set<string> | undefined {\n  return publicFilesMap.get(config);\n}\n"]}
{"version":3,"file":"http.js","sourceRoot":"","sources":["../../src/utils/http.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * The following is modified based on source found in\n * https://github.com/vitejs/vite\n *\n * MIT Licensed\n * Copyright (c) 2019-present, (Evan) You and Vite contributors\n * https://github.com/vitejs/vite/blob/main/LICENSE\n */\n\nimport type { AddressInfo, Server } from 'node:net';\nimport os from 'node:os';\nimport { UserServerConfig } from '../index.js';\n\nexport interface ResolvedServerUrls {\n  local: string[];\n  network: string[];\n}\n\nexport interface Hostname {\n  host: string | undefined;\n  name: string;\n}\n\nexport const urlRegex = /^(https?:)?\\/\\/([^/]+)/;\n\nexport const loopbackHosts = new Set([\n  'localhost',\n  '127.0.0.1',\n  '::1',\n  '0000:0000:0000:0000:0000:0000:0000:0001'\n]);\n\nexport const wildcardHosts = new Set([\n  '0.0.0.0',\n  '::',\n  '0000:0000:0000:0000:0000:0000:0000:0000'\n]);\n\nexport function resolveServerUrls(\n  server: Server,\n  options: UserServerConfig,\n  publicPath?: string\n): ResolvedServerUrls {\n  const address = server.address();\n  const isAddressInfo = (x: any): x is AddressInfo => x?.address;\n\n  if (!isAddressInfo(address)) {\n    return { local: [], network: [] };\n  }\n\n  const local: string[] = [];\n  const network: string[] = [];\n  const hostname = resolveHostname(options.host);\n  const protocol = options.https ? 'https' : 'http';\n  const { port } = getAddressHostnamePort(address);\n  const base = publicPath || '';\n\n  if (hostname.host !== undefined && !wildcardHosts.has(hostname.host)) {\n    const url = createServerUrl(protocol, hostname.name, port, base);\n    if (loopbackHosts.has(hostname.host)) {\n      local.push(url);\n    } else {\n      network.push(url);\n    }\n  } else {\n    const networkInterfaces = Object.values(os.networkInterfaces()).flatMap(\n      (nInterface) => nInterface || []\n    );\n    networkInterfaces\n      .filter(\n        (detail) =>\n          detail &&\n          detail.address &&\n          (detail.family === 'IPv4' ||\n            // @ts-expect-error Node 18.0 - 18.3 returns number\n            detail.family === 4)\n      )\n      .forEach((detail) => {\n        let host = detail.address.replace('127.0.0.1', hostname.name);\n        host = host.includes(':') ? `[${host}]` : host;\n        const url = createServerUrl(protocol, host, port, base);\n        detail.address.includes('127.0.0.1')\n          ? local.push(url)\n          : network.push(url);\n      });\n  }\n\n  return { local, network };\n}\n\nexport function resolveHostname(\n  optionsHost: string | boolean | undefined\n): Hostname {\n  let host: string | undefined;\n  if (optionsHost === undefined || optionsHost === false) {\n    host = 'localhost';\n  } else if (optionsHost === true) {\n    host = undefined;\n  } else {\n    host = optionsHost;\n  }\n\n  const name =\n    host === undefined || wildcardHosts.has(host) ? 'localhost' : host;\n\n  return { host, name };\n}\n\nfunction getAddressHostnamePort(server: AddressInfo): {\n  host: string;\n  port: number;\n} {\n  const hostname = server.address || 'localhost';\n  const port = server.port;\n  return { host: hostname, port };\n}\n\nfunction createServerUrl(\n  protocol: string,\n  hostname: string,\n  port: number,\n  publicPath: string\n): string {\n  const hostnameName = hostname.includes(':') ? `[${hostname}]` : hostname;\n  return `${protocol}://${hostnameName}:${port}${publicPath}`;\n}\n"]}
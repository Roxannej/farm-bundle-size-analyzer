{"version":3,"file":"file.js","sourceRoot":"","sources":["../../src/utils/file.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport fsp from 'node:fs/promises';\nimport path from 'path';\nimport { normalizePath } from './share.js';\n\ninterface FileNode {\n  isLeaf: boolean;\n  name: string;\n  children: FileNode[];\n}\n\nexport function generateFileTree(files: string[]): FileNode[] {\n  const fileTree: FileNode[] = [];\n\n  for (const file of files) {\n    const parts = file.split('/');\n    let currentNode = fileTree;\n\n    for (let i = 0; i < parts.length; i++) {\n      const part = parts[i];\n      const existingNode = currentNode.find((node) => node.name === part);\n\n      if (existingNode) {\n        currentNode = existingNode.children;\n      } else {\n        const newNode: FileNode = {\n          isLeaf: i === parts.length - 1,\n          name: part,\n          children: []\n        };\n        currentNode.push(newNode);\n        currentNode = newNode.children;\n      }\n    }\n  }\n\n  return fileTree;\n}\n\nexport function buildFileTreeHtml(node: FileNode[]): string {\n  let html = '';\n\n  for (const fileNode of node) {\n    const { isLeaf, name, children } = fileNode;\n    const indent = isLeaf ? '- ' : '|---- ';\n    const path = name.replace(/ /g, '%20');\n    html += `<div>${indent}<a href=\"${path}\">${name}</a></div>`;\n    if (!isLeaf) {\n      html += buildFileTreeHtml(children).replace(\n        /^/gm,\n        '&nbsp;&nbsp;&nbsp;&nbsp;'\n      );\n    }\n  }\n\n  return html;\n}\n\nexport function generateFileTreeHtml(node: FileNode[]): string {\n  return `\n      <!DOCTYPE html>\n      <html lang=\"\">\n        <head>\n          <meta charset=\"utf-8\">\n          <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n          <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,user-scalable=no\">\n          <title>Out Files</title>\n        </head>\n        <body>\n          <!-- file tree-->\n         <div>${buildFileTreeHtml(node)}</div>\n        </body>\n      </html>\n      `;\n}\n\nexport const ERR_SYMLINK_IN_RECURSIVE_READDIR =\n  'ERR_SYMLINK_IN_RECURSIVE_READDIR';\nexport async function recursiveReaddir(dir: string): Promise<string[]> {\n  if (!fs.existsSync(dir)) {\n    return [];\n  }\n  let directs: fs.Dirent[];\n  try {\n    directs = await fsp.readdir(dir, { withFileTypes: true });\n  } catch (e) {\n    if (e.code === 'EACCES') {\n      // Ignore permission errors\n      return [];\n    }\n    throw e;\n  }\n  if (directs.some((dirent) => dirent.isSymbolicLink())) {\n    const err: any = new Error(\n      'Symbolic links are not supported in recursiveReaddir'\n    );\n    err.code = ERR_SYMLINK_IN_RECURSIVE_READDIR;\n    throw err;\n  }\n  const files = await Promise.all(\n    directs.map((dirent) => {\n      const res = path.resolve(dir, dirent.name);\n      return dirent.isDirectory() ? recursiveReaddir(res) : normalizePath(res);\n    })\n  );\n  return files.flat(1);\n}\n"]}
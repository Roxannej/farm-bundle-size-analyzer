{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/watcher/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { createRequire } from 'node:module';\n\nimport { FSWatcher } from 'chokidar';\n\nimport { Compiler } from '../compiler/index.js';\nimport { Server } from '../server/index.js';\nimport { Logger, compilerHandler } from '../utils/index.js';\n\nimport { existsSync } from 'node:fs';\nimport type { ResolvedUserConfig } from '../config/index.js';\nimport type { JsUpdateResult } from '../types/binding.js';\nimport { createWatcher } from './create-watcher.js';\n\ninterface ImplFileWatcher {\n  watch(): Promise<void>;\n}\n\nexport class FileWatcher implements ImplFileWatcher {\n  private _root: string;\n  private _watcher: FSWatcher;\n  private _close = false;\n  private _watchedFiles = new Set<string>();\n\n  constructor(\n    public serverOrCompiler: Server | Compiler,\n    public options: ResolvedUserConfig,\n    private _logger: Logger\n  ) {\n    this._root = options.root;\n  }\n\n  getInternalWatcher() {\n    return this._watcher;\n  }\n\n  filterWatchFile(file: string, root: string): boolean {\n    const suffix = process.platform === 'win32' ? '\\\\' : '/';\n\n    return (\n      !file.startsWith(`${root}${suffix}`) &&\n      !file.includes(`node_modules${suffix}`) &&\n      !file.includes('\\0') &&\n      existsSync(file)\n    );\n  }\n\n  getExtraWatchedFiles() {\n    const compiler = this.getCompilerFromServerOrCompiler(\n      this.serverOrCompiler\n    );\n\n    return [\n      ...compiler.resolvedModulePaths(this._root),\n      ...compiler.resolvedWatchPaths()\n    ].filter((file) => this.filterWatchFile(file, this._root));\n  }\n\n  watchExtraFiles() {\n    const files = this.getExtraWatchedFiles();\n\n    for (const file of files) {\n      if (!this._watchedFiles.has(file)) {\n        this._watcher.add(file);\n        this._watchedFiles.add(file);\n      }\n    }\n  }\n\n  async watch() {\n    // Determine how to compile the project\n    const compiler = this.getCompilerFromServerOrCompiler(\n      this.serverOrCompiler\n    );\n\n    const handlePathChange = async (path: string): Promise<void> => {\n      if (this._close) {\n        return;\n      }\n\n      try {\n        if (this.serverOrCompiler instanceof Server) {\n          await this.serverOrCompiler.hmrEngine.hmrUpdate(path);\n        }\n\n        if (\n          this.serverOrCompiler instanceof Compiler &&\n          this.serverOrCompiler.hasModule(path)\n        ) {\n          compilerHandler(\n            async () => {\n              const result = await compiler.update([path], true);\n              handleUpdateFinish(result);\n              compiler.writeResourcesToDisk();\n            },\n            this.options,\n            this._logger,\n            { clear: true }\n          );\n        }\n      } catch (error) {\n        this._logger.error(error);\n      }\n    };\n\n    const watchedFiles = this.getExtraWatchedFiles();\n\n    const files = [this.options.root, ...watchedFiles];\n    this._watchedFiles = new Set(files);\n    this._watcher = createWatcher(this.options, files);\n\n    this._watcher.on('change', (path) => {\n      if (this._close) return;\n      handlePathChange(path);\n    });\n\n    const handleUpdateFinish = (updateResult: JsUpdateResult) => {\n      const added = [\n        ...updateResult.added,\n        ...updateResult.extraWatchResult.add\n      ].map((addedModule) => {\n        const resolvedPath = compiler.transformModulePath(\n          this._root,\n          addedModule\n        );\n        return resolvedPath;\n      });\n      const filteredAdded = added.filter((file) =>\n        this.filterWatchFile(file, this._root)\n      );\n\n      if (filteredAdded.length > 0) {\n        this._watcher.add(filteredAdded);\n      }\n    };\n\n    if (this.serverOrCompiler instanceof Server) {\n      this.serverOrCompiler.hmrEngine?.onUpdateFinish(handleUpdateFinish);\n    }\n  }\n\n  private getCompilerFromServerOrCompiler(\n    serverOrCompiler: Server | Compiler\n  ): Compiler {\n    return serverOrCompiler instanceof Server\n      ? serverOrCompiler.getCompiler()\n      : serverOrCompiler;\n  }\n\n  close() {\n    this._close = true;\n    this._watcher = null;\n    this.serverOrCompiler = null;\n  }\n}\n\nexport function clearModuleCache(modulePath: string) {\n  const _require = createRequire(import.meta.url);\n  delete _require.cache[_require.resolve(modulePath)];\n}\n"]}
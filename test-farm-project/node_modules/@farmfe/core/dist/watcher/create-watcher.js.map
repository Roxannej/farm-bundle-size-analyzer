{"version":3,"file":"create-watcher.js","sourceRoot":"","sources":["../../src/watcher/create-watcher.ts"],"names":[],"mappings":"AAAA,OAAO,IAAI,MAAM,WAAW,CAAC;AAE7B,OAAO,QAAqC,MAAM,UAAU,CAAC;AAC7D,OAAO,IAAI,MAAM,WAAW,CAAC;AAI7B,SAAS,sBAAsB,CAC7B,MAA0B,EAC1B,qBAAmC;IAEnC,MAAM,EAAE,OAAO,GAAG,EAAE,EAAE,GAAG,mBAAmB,EAAE,GAC5C,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,YAAY,IAAI,EAAE,CAAC;IACzC,IAAI,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,cAAc,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IAE3E,IACE,OAAO,MAAM,CAAC,WAAW,EAAE,eAAe,KAAK,QAAQ;QACvD,MAAM,CAAC,WAAW,CAAC,eAAe,CAAC,QAAQ,EAC3C;QACA,QAAQ,GAAG,MAAM,CAAC,WAAW,CAAC,eAAe,CAAC,QAAQ,CAAC;QAEvD,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;YAC9B,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;SAChD;KACF;IAED,MAAM,OAAO,GAAiB;QAC5B,OAAO,EAAE;YACP,YAAY;YACZ,oBAAoB;YACpB,oBAAoB;YACpB,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,KAAK;YACjC,IAAI,CAAC,UAAU,CACb,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAC1D,GAAG,KAAK;YACT,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;SAClD;QACD,aAAa,EAAE,IAAI;QACnB,sBAAsB,EAAE,IAAI;QAC5B,oEAAoE;QACpE,gBAAgB,EACd,OAAO,CAAC,QAAQ,KAAK,OAAO;YAC1B,CAAC,CAAC,SAAS;YACX,CAAC,CAAC;gBACE,kBAAkB,EAAE,EAAE;gBACtB,YAAY,EAAE,EAAE;aACjB;QACP,GAAG,mBAAmB;QACtB,GAAG,qBAAqB;KACzB,CAAC;IAEF,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,MAAM,UAAU,aAAa,CAC3B,MAA0B,EAC1B,KAAe,EACf,eAA8B;IAE9B,MAAM,OAAO,GAAG,sBAAsB,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;IAEhE,OAAO,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;AACxC,CAAC","sourcesContent":["import path from 'node:path';\n\nimport chokidar, { FSWatcher, WatchOptions } from 'chokidar';\nimport glob from 'fast-glob';\n\nimport { ResolvedUserConfig } from '../index.js';\n\nfunction resolveChokidarOptions(\n  config: ResolvedUserConfig,\n  insideChokidarOptions: WatchOptions\n) {\n  const { ignored = [], ...userChokidarOptions } =\n    config.server?.hmr?.watchOptions ?? {};\n  let cacheDir = path.resolve(config.root, 'node_modules', '.farm', 'cache');\n\n  if (\n    typeof config.compilation?.persistentCache === 'object' &&\n    config.compilation.persistentCache.cacheDir\n  ) {\n    cacheDir = config.compilation.persistentCache.cacheDir;\n\n    if (!path.isAbsolute(cacheDir)) {\n      cacheDir = path.resolve(config.root, cacheDir);\n    }\n  }\n\n  const options: WatchOptions = {\n    ignored: [\n      '**/.git/**',\n      '**/node_modules/**',\n      '**/test-results/**', // Playwright\n      glob.escapePath(cacheDir) + '/**',\n      glob.escapePath(\n        path.resolve(config.root, config.compilation.output.path)\n      ) + '/**',\n      ...(Array.isArray(ignored) ? ignored : [ignored])\n    ],\n    ignoreInitial: true,\n    ignorePermissionErrors: true,\n    // for windows and macos, we need to wait for the file to be written\n    awaitWriteFinish:\n      process.platform === 'linux'\n        ? undefined\n        : {\n            stabilityThreshold: 10,\n            pollInterval: 10\n          },\n    ...userChokidarOptions,\n    ...insideChokidarOptions\n  };\n\n  return options;\n}\n\nexport function createWatcher(\n  config: ResolvedUserConfig,\n  files: string[],\n  chokidarOptions?: WatchOptions\n): FSWatcher {\n  const options = resolveChokidarOptions(config, chokidarOptions);\n\n  return chokidar.watch(files, options);\n}\n"]}
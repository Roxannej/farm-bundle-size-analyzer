{"version":3,"file":"env.js","sourceRoot":"","sources":["../../src/config/env.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * The following is modified based on source found in\n * https://github.com/vitejs/vite/blob/main/packages/vite/src/node/env.ts\n *\n * MIT License\n * Copyright (c) 2019-present, Yuxi (Evan)\n * https://github.com/vitejs/vite/blob/main/LICENSE\n *\n */\n\nimport fs from 'node:fs';\nimport path from 'node:path';\n\nimport { parse } from 'dotenv';\nimport { type DotenvPopulateInput, expand } from 'dotenv-expand';\nimport { arraify, normalizePath, tryStatSync } from '../utils/index.js';\n\nexport function loadEnv(\n  mode: string,\n  envDir: string,\n  prefixes: string | string[] = ['FARM_', 'VITE_']\n): Record<string, string> {\n  if (mode === 'local') {\n    throw new Error(\n      `\"local\" cannot be used as a mode name because it conflicts with ` +\n        `the .local postfix for .env files.`\n    );\n  }\n  prefixes = arraify(prefixes);\n  const env: Record<string, string> = {};\n  const envFiles = getEnvFilesForMode(mode, envDir);\n  const parsed = Object.fromEntries(\n    envFiles.flatMap((filePath) => {\n      if (!tryStatSync(filePath)?.isFile()) return [];\n      return Object.entries(parse(fs.readFileSync(filePath)));\n    })\n  );\n  const processEnv = { ...process.env } as DotenvPopulateInput;\n  expand({ parsed, processEnv });\n\n  // only keys that start with prefix are exposed to client\n  for (const [key, value] of Object.entries(parsed)) {\n    if (prefixes.some((prefix) => key.startsWith(prefix))) {\n      env[key] = value;\n    }\n  }\n  for (const key in process.env) {\n    if (\n      prefixes.some((prefix) => key.startsWith(prefix)) &&\n      key !== 'FARM_LIB_CORE_PATH'\n    ) {\n      env[key] = process.env[key] as string;\n    }\n  }\n  return env;\n}\n\nexport function getExistsEnvFiles(mode: string, envDir: string): string[] {\n  const envFiles = getEnvFilesForMode(mode, envDir);\n  return envFiles.filter((filePath) => tryStatSync(filePath)?.isFile());\n}\n\nexport type CompilationMode = 'development' | 'production';\n\nexport function setProcessEnv(mode: CompilationMode) {\n  process.env.NODE_ENV = mode;\n}\n\nexport const isDisableCache = () => !!process.env.DISABLE_CACHE;\n\nexport function getEnvFilesForMode(mode: string, envDir: string): string[] {\n  return [`.env`, `.env.local`, `.env.${mode}`, `.env.${mode}.local`].map(\n    (file) => normalizePath(path.join(envDir, file))\n  );\n}\n"]}
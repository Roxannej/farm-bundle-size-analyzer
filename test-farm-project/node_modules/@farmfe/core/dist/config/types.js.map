{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/config/types.ts"],"names":[],"mappings":"","sourcesContent":["import { SecureServerOptions } from 'node:http2';\nimport { Server } from '../index.js';\n\nimport type { OutgoingHttpHeaders } from 'http';\nimport type cors from '@koa/cors';\nimport { WatchOptions } from 'chokidar';\nimport type { Options } from 'http-proxy-middleware';\nimport { Middleware } from 'koa';\nimport type { RustPlugin } from '../plugin/rust/index.js';\nimport type { JsPlugin } from '../plugin/type.js';\nimport type { Config, CssConfig } from '../types/binding.js';\nimport type { Logger } from '../utils/index.js';\n\nexport interface ConfigEnv {\n  mode: string;\n}\n\nexport type ProxyOptions = Options;\n\nexport type UserConfigFnPromise = (env: ConfigEnv) => Promise<UserConfig>;\nexport type UserConfigFn = (env: ConfigEnv) => UserConfig | Promise<UserConfig>;\nexport type UserConfigFnObject = (env: ConfigEnv) => UserConfig;\n\nexport type UserConfigExport =\n  | UserConfig\n  | Promise<UserConfig>\n  | UserConfigFnObject\n  | UserConfigFnPromise\n  | UserConfigFn;\n\nexport interface UserServerConfig {\n  headers?: OutgoingHttpHeaders | undefined;\n  port?: number;\n  https?: SecureServerOptions;\n  protocol?: 'http' | 'https';\n  hostname?: { name: string; host: string | undefined };\n  allowedHosts?: string[];\n  // http2?: boolean;\n  hmr?: boolean | UserHmrConfig;\n  proxy?: Record<string, Options>;\n  strictPort?: boolean;\n  open?: boolean;\n  host?: string | boolean;\n  cors?: boolean | cors.Options;\n  // whether to serve static assets in spa mode, default to true\n  spa?: boolean;\n  middlewares?: DevServerMiddleware[];\n  writeToDisk?: boolean;\n}\n\nexport interface UserPreviewServerConfig {\n  // write static output file\n  output?: { path?: string; publicPath?: string };\n  distDir?: string;\n  https?: SecureServerOptions;\n  port?: number;\n  host?: string | boolean;\n}\n\nexport type NormalizedServerConfig = Required<\n  Omit<UserServerConfig, 'hmr'> & {\n    hmr?: Required<UserHmrConfig>;\n  }\n>;\n\nexport interface NormalizedConfig {\n  compilationConfig: Config;\n  serverConfig?: NormalizedServerConfig;\n}\n\nexport interface UserHmrConfig {\n  host?: string | boolean;\n  port?: number;\n  path?: string;\n  overlay?: boolean;\n  protocol?: string;\n  watchOptions?: WatchOptions;\n}\n\ntype InternalConfig = Config['config'] extends undefined\n  ? object\n  : Required<Config>['config'];\n\ntype AvailableUserConfigKeys = Exclude<\n  keyof InternalConfig,\n  'configFilePath' | 'env' | 'coreLibPath' | 'root'\n>;\n\nexport interface UserConfig {\n  /** current root of this project, default to current working directory */\n  root?: string;\n  clearScreen?: boolean;\n  envDir?: string;\n  envPrefix?: string | string[];\n  publicDir?: string;\n  /** js plugin(which is a javascript object) and rust plugin(which is string refer to a .farm file or a package) */\n  plugins?: (RustPlugin | JsPlugin | JsPlugin[] | undefined | null | false)[];\n  /** vite plugins */\n  vitePlugins?: (\n    | null\n    | undefined\n    | object\n    | (() => { vitePlugin: any; filters: string[] })\n  )[];\n  /** config related to compilation */\n  compilation?: Pick<InternalConfig, AvailableUserConfigKeys>;\n  /** config related to dev server */\n  server?: UserServerConfig;\n  /** Files under this dir will always be treated as static assets. serve it in dev, and copy it to output.path when build */\n}\n\ninterface ResolvedCss extends CssConfig {\n  modules?: CssConfig['modules'] & {\n    localsConversion?: never;\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ResolvedCompilation\n  extends Exclude<Config['config'], undefined> {\n  external?: string[];\n  resolve?: {\n    dedupe?: never;\n  } & Config['config']['resolve'];\n  assets?: Omit<Config['config']['assets'], 'mode'>;\n  css?: ResolvedCss;\n}\n\nexport interface ResolvedUserConfig extends UserConfig {\n  env?: Record<string, any>;\n  envDir?: string;\n  envFiles?: string[];\n  envPrefix?: string | string[];\n  configFilePath?: string;\n  envMode?: string;\n  configFileDependencies?: string[];\n  compilation?: ResolvedCompilation;\n  server?: NormalizedServerConfig;\n  jsPlugins?: JsPlugin[];\n  rustPlugins?: [string, string][];\n}\n\nexport interface GlobalFarmCLIOptions {\n  '--'?: string[];\n  c?: boolean | string;\n  config?: string;\n  m?: string;\n  mode?: 'development' | 'production';\n}\n\nexport interface FarmCLIServerOptions {\n  port?: number;\n  open?: boolean;\n  https?: SecureServerOptions;\n  hmr?: boolean;\n  host?: boolean | string;\n  strictPort?: boolean;\n}\n\nexport interface FarmCLIBuildOptions {\n  outDir?: string;\n  sourcemap?: boolean;\n  minify?: boolean;\n}\n\nexport interface FarmCLIPreviewOptions {\n  open?: boolean;\n  https?: SecureServerOptions;\n  port?: number;\n  host?: string | boolean;\n}\n\nexport interface FarmCLIOptions\n  extends FarmCLIBuildOptions,\n    FarmCLIPreviewOptions {\n  logger?: Logger;\n  config?: string;\n  configPath?: string;\n  compilation?: Config['config'];\n  mode?: string;\n  root?: string;\n  server?: FarmCLIServerOptions;\n  clearScreen?: boolean;\n}\n\nexport type DevServerMiddleware = (context: Server) => Middleware | undefined;\n\nexport interface Alias {\n  // TODO support RegExp\n  find: string;\n  replacement: string;\n}\n"]}
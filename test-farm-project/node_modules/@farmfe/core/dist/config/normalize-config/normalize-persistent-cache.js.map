{"version":3,"file":"normalize-persistent-cache.js","sourceRoot":"","sources":["../../../src/config/normalize-config/normalize-persistent-cache.ts"],"names":[],"mappings":"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","sourcesContent":["import { existsSync, readFileSync } from 'node:fs';\nimport { createRequire } from 'node:module';\nimport path from 'node:path';\n\nimport { RustPlugin } from '../../plugin/index.js';\nimport { Config } from '../../types/binding.js';\nimport { Logger } from '../../utils/logger.js';\nimport { traceDependencies } from '../../utils/trace-dependencies.js';\nimport { isDisableCache } from '../env.js';\nimport { ResolvedUserConfig } from '../index.js';\n\nconst defaultGlobalBuiltinCacheKeyStrategy = {\n  define: true,\n  buildDependencies: true,\n  lockfile: true,\n  packageJson: true,\n  env: true\n};\n\nexport async function normalizePersistentCache(\n  config: Config['config'],\n  resolvedUserConfig: ResolvedUserConfig,\n  logger: Logger\n) {\n  if (isDisableCache()) {\n    config.persistentCache = false;\n  }\n\n  if (config?.persistentCache === false) {\n    return;\n  }\n\n  if (config.persistentCache === true || config.persistentCache == undefined) {\n    config.persistentCache = {\n      buildDependencies: [],\n      moduleCacheKeyStrategy: {},\n      envs: {}\n    };\n  }\n  // globalCacheKeyStrategy should not be passed to rust\n  let { globalBuiltinCacheKeyStrategy } = config.persistentCache;\n  delete config.persistentCache.globalBuiltinCacheKeyStrategy;\n  if (!globalBuiltinCacheKeyStrategy) {\n    globalBuiltinCacheKeyStrategy = {};\n  }\n  globalBuiltinCacheKeyStrategy = {\n    ...defaultGlobalBuiltinCacheKeyStrategy,\n    ...globalBuiltinCacheKeyStrategy\n  };\n\n  if (globalBuiltinCacheKeyStrategy.env) {\n    config.persistentCache.envs = {\n      ...(resolvedUserConfig.env ?? {}),\n      ...(config.persistentCache.envs ?? {})\n    };\n  }\n\n  if (globalBuiltinCacheKeyStrategy.define) {\n    // all define options should be in envs\n    if (config.define && typeof config.define === 'object') {\n      config.persistentCache.envs = {\n        ...Object.entries(config.define)\n          .map(([k, v]) =>\n            typeof v !== 'string' ? [k, JSON.stringify(v)] : [k, v]\n          )\n          .reduce(\n            (acc, [k, v]) => {\n              acc[k] = v;\n              return acc;\n            },\n            {} as Record<string, string>\n          ),\n        ...config.persistentCache.envs\n      };\n    }\n  }\n\n  // add type of package.json to envs\n  const packageJsonPath = path.join(\n    config.root ?? process.cwd(),\n    'package.json'\n  );\n\n  if (globalBuiltinCacheKeyStrategy.packageJson) {\n    if (existsSync(packageJsonPath)) {\n      const s = readFileSync(packageJsonPath).toString();\n      const packageJson = JSON.parse(s);\n      const affectedKeys = [\n        'type',\n        'name',\n        'exports',\n        'browser',\n        'main',\n        'module'\n      ];\n\n      for (const key of affectedKeys) {\n        const value = packageJson[key] ?? 'unknown';\n        config.persistentCache.envs[`package.json[${key}]`] =\n          typeof value !== 'string' ? JSON.stringify(value) : value;\n      }\n    }\n  }\n\n  if (!config.persistentCache.buildDependencies) {\n    config.persistentCache.buildDependencies = [];\n  }\n\n  if (globalBuiltinCacheKeyStrategy.lockfile) {\n    // TODO find latest lock file starting from root\n    for (const lockfile of [\n      'package-lock.json',\n      'yarn.lock',\n      'pnpm-lock.yaml'\n    ]) {\n      if (!config.persistentCache.buildDependencies.includes(lockfile)) {\n        config.persistentCache.buildDependencies.push(lockfile);\n      }\n    }\n  }\n\n  if (config?.output?.targetEnv === 'node') {\n    if (!config.persistentCache.moduleCacheKeyStrategy) {\n      config.persistentCache.moduleCacheKeyStrategy = {};\n    }\n\n    config.persistentCache.moduleCacheKeyStrategy.timestamp = false;\n  }\n\n  // trace all build dependencies of the config file\n  if (\n    globalBuiltinCacheKeyStrategy.buildDependencies &&\n    resolvedUserConfig.configFilePath\n  ) {\n    const files = resolvedUserConfig?.configFileDependencies?.length\n      ? resolvedUserConfig.configFileDependencies\n      : await traceDependencies(resolvedUserConfig.configFilePath, logger);\n\n    const packages = [];\n\n    for (const file of files) {\n      if (path.isAbsolute(file)) {\n        config.persistentCache.buildDependencies.push(file);\n      } else {\n        packages.push(file);\n      }\n    }\n\n    const rustPlugins = resolvedUserConfig.plugins?.filter(\n      (plugin) => typeof plugin === 'string' || Array.isArray(plugin)\n    ) as RustPlugin[];\n\n    packages.push(...(rustPlugins ?? []));\n\n    if (packages?.length) {\n      const require = createRequire(path.join(config.root, 'package.json'));\n\n      for (const p of packages) {\n        try {\n          let packageJsonPath: string;\n          if (typeof p === 'string') {\n            packageJsonPath = require.resolve(`${p}/package.json`);\n          } else {\n            packageJsonPath = require.resolve(`${p[0]}/package.json`);\n          }\n\n          const packageJson = require(packageJsonPath);\n          const key = `${packageJson.name}@${packageJson.version}`;\n          config.persistentCache.buildDependencies.push(key);\n        } catch {\n          if (typeof p === 'string') {\n            config.persistentCache.buildDependencies.push(p);\n          } else if (Array.isArray(p) && typeof p[0] === 'string') {\n            config.persistentCache.buildDependencies.push(p[0]);\n          }\n          continue;\n        }\n      }\n    }\n\n    config.persistentCache.buildDependencies.sort();\n  }\n}\n"]}
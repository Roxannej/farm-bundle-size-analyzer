{"version":3,"file":"rustPluginResolver.js","sourceRoot":"","sources":["../../../src/plugin/rust/rustPluginResolver.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,aAAa,CAAC;AAC5C,OAAO,IAAI,MAAM,WAAW,CAAC;AAC7B,OAAO,EAAE,aAAa,EAAE,MAAM,UAAU,CAAC;AAYzC;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,kBAAkB,CACtC,MAAkB,EAClB,IAAY;IAEZ,IAAI,UAAkB,CAAC;IACvB,IAAI,OAAO,GAAG,IAAI,CAAC;IAEnB,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;QAC9B,UAAU,GAAG,MAAM,CAAC;KACrB;SAAM,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;QACvD,CAAC,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC;KACxE;SAAM;QACL,MAAM,IAAI,KAAK,CACb,6FAA6F,CAC9F,CAAC;KACH;IAED,2CAA2C;IAC3C,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;QAC/D,MAAM,OAAO,GAAG,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC,CAAC;QAC/D,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;KAC1C;IAED,6FAA6F;IAC7F,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;QACjC,iFAAiF;QACjF,IAAI,OAAO,CAAC,QAAQ,KAAK,OAAO,EAAE;YAChC,UAAU,GAAG,CAAC,MAAM,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;SAC3E;aAAM;YACL,UAAU,GAAG,MAAM,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;SAC9D;QACD,2BAA2B;QAE3B,mCAAmC;QACnC,IAAI,OAAO,UAAU,KAAK,UAAU,EAAE;YACpC,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAI,UAAiC,EAAE,CAAC;YAC/D,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC;gBACvB,GAAG,QAAQ;gBACX,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;aACvB,CAAC,CAAC;YACH,UAAU,GAAG,KAAK,CAAC;SACpB;QAED,wGAAwG;QACxG,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;YAClC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,aAAa,EAAE,GACtC,UAAkC,CAAC;YACrC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC;gBACvB,GAAG,aAAa;gBAChB,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;aACvB,CAAC,CAAC;YACH,UAAU,GAAG,MAAM,CAAC;SACrB;KACF;IAED,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;AAC/B,CAAC","sourcesContent":["import { createRequire } from 'node:module';\nimport path from 'node:path';\nimport { pathToFileURL } from 'node:url';\n\nexport type RustPlugin = string | [string, any];\n\ntype RustPluginPathObject = {\n  binary: string;\n  options: Record<string, any>;\n};\n\ntype RustPluginFunction = (\n  options?: Record<string, any>\n) => [string, typeof options];\n/**\n * Resolve the binary plugin file, return [filePath, jsonStringifiedOptions]\n * @param plugin rust plugin config\n */\nexport async function rustPluginResolver(\n  plugin: RustPlugin,\n  root: string\n): Promise<[string, string]> {\n  let pluginPath: string;\n  let options = '{}';\n\n  if (typeof plugin === 'string') {\n    pluginPath = plugin;\n  } else if (Array.isArray(plugin) && plugin.length === 2) {\n    [pluginPath, options] = [plugin[0], JSON.stringify(plugin[1]) ?? '{}'];\n  } else {\n    throw new Error(\n      'Invalid config: [plugins]. A rust plugin must be a string, or [string, Record<string, any>]'\n    );\n  }\n\n  // not absolute path, treat it as a package\n  if (!path.isAbsolute(pluginPath) && !pluginPath.startsWith('.')) {\n    const require = createRequire(path.join(root, 'package.json'));\n    pluginPath = require.resolve(pluginPath);\n  }\n\n  // a rust plugin' entry can be a .farm file or a .js file that exports the path to the binary\n  if (!pluginPath.endsWith('.farm')) {\n    // rust plugin should export a default string representing the path to the binary\n    if (process.platform === 'win32') {\n      pluginPath = (await import(pathToFileURL(pluginPath).toString())).default;\n    } else {\n      pluginPath = await import(pluginPath).then((m) => m.default);\n    }\n    // console.log(pluginPath);\n\n    // Calling the plugin as a function\n    if (typeof pluginPath === 'function') {\n      const [_path, _options] = (pluginPath as RustPluginFunction)();\n      options = JSON.stringify({\n        ..._options,\n        ...JSON.parse(options)\n      });\n      pluginPath = _path;\n    }\n\n    // The entry js file should return { binary: string, options: Record<string, any> } when it's not string\n    if (typeof pluginPath !== 'string') {\n      const { binary, options: pluginOptions } =\n        pluginPath as RustPluginPathObject;\n      options = JSON.stringify({\n        ...pluginOptions,\n        ...JSON.parse(options)\n      });\n      pluginPath = binary;\n    }\n  }\n\n  return [pluginPath, options];\n}\n"]}
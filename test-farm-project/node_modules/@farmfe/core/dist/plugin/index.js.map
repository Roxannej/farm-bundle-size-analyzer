{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/plugin/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { isArray, isObject } from '../utils/index.js';\nimport { convertPlugin } from './js/index.js';\nimport { rustPluginResolver } from './rust/index.js';\n\nimport { ResolvedUserConfig, type UserConfig } from '../config/index.js';\nimport merge from '../utils/merge.js';\nimport type { JsPlugin } from './type.js';\n\nexport * from './js/index.js';\nexport * from './rust/index.js';\n\nexport async function resolveFarmPlugins(config: UserConfig) {\n  const plugins = config.plugins ?? [];\n\n  if (!plugins.length) {\n    return {\n      rustPlugins: [],\n      jsPlugins: []\n    };\n  }\n\n  const rustPlugins = [];\n\n  const jsPlugins: JsPlugin[] = [];\n\n  for (const plugin of plugins) {\n    if (!plugin) {\n      continue;\n    }\n\n    if (\n      typeof plugin === 'string' ||\n      (isArray(plugin) && typeof plugin[0] === 'string')\n    ) {\n      rustPlugins.push(\n        await rustPluginResolver(plugin as string, config.root ?? process.cwd())\n      );\n    } else if (isObject(plugin)) {\n      convertPlugin(plugin as unknown as JsPlugin);\n      jsPlugins.push(plugin as unknown as JsPlugin);\n    } else if (isArray(plugin)) {\n      for (const pluginNestItem of plugin as JsPlugin[]) {\n        convertPlugin(pluginNestItem as JsPlugin);\n        jsPlugins.push(pluginNestItem as JsPlugin);\n      }\n    } else {\n      throw new Error(\n        `plugin ${plugin} is not supported, Please pass the correct plugin type`\n      );\n    }\n  }\n\n  return {\n    rustPlugins,\n    jsPlugins\n  };\n}\n\n// resolve promise plugins\nexport async function resolveAsyncPlugins<T>(arr: T[]): Promise<T[]> {\n  return arr.reduce<Promise<T[]>>(async (acc, current) => {\n    const flattenedAcc = await acc;\n\n    if (current instanceof Promise) {\n      const resolvedElement = await current;\n      return flattenedAcc.concat(resolvedElement);\n    } else if (Array.isArray(current)) {\n      const flattenedArray = await resolveAsyncPlugins(current);\n      return flattenedAcc.concat(flattenedArray);\n    } else {\n      return flattenedAcc.concat(current);\n    }\n  }, Promise.resolve([]));\n}\n\nexport async function resolveConfigHook(\n  config: UserConfig,\n  plugins: JsPlugin[]\n): Promise<UserConfig> {\n  let conf = config;\n\n  const uniqueVitePlugins = new Map<string, JsPlugin>();\n\n  for (const p of plugins) {\n    const pluginName = p.name;\n\n    if (!uniqueVitePlugins.has(pluginName)) {\n      uniqueVitePlugins.set(pluginName, p);\n    }\n  }\n\n  for (const p of uniqueVitePlugins.values()) {\n    if (p.config) {\n      const res = await p.config(conf);\n\n      if (res) {\n        conf = merge(conf, res);\n      }\n    }\n  }\n\n  return conf;\n}\n\nexport async function resolveConfigResolvedHook(\n  config: ResolvedUserConfig,\n  plugins: JsPlugin[]\n) {\n  for (const p of plugins) {\n    if (p.configResolved) {\n      await p.configResolved(config);\n    }\n  }\n}\n\nexport function getSortedPlugins(plugins: readonly JsPlugin[]): JsPlugin[] {\n  // TODO The priority needs to be redefined.\n  const DEFAULT_PRIORITY = 100;\n\n  const sortedPlugins = plugins\n    .filter(\n      (plugin): plugin is JsPlugin & { priority: number } =>\n        typeof plugin === 'object' && typeof plugin.priority === 'number'\n    )\n    .sort((a, b) => b.priority - a.priority);\n\n  const prePlugins = sortedPlugins.filter(\n    (plugin) => plugin?.priority > DEFAULT_PRIORITY\n  );\n\n  const postPlugins = sortedPlugins.filter(\n    (plugin) => plugin?.priority < DEFAULT_PRIORITY\n  );\n\n  const normalPlugins = plugins.filter(\n    (plugin) =>\n      (typeof plugin === 'object' && typeof plugin.priority !== 'number') ||\n      plugin?.priority === DEFAULT_PRIORITY\n  );\n\n  return [...prePlugins, ...normalPlugins, ...postPlugins];\n}\n\nexport function getSortedPluginHooks(\n  plugins: JsPlugin[],\n  hookName: keyof JsPlugin\n): any {\n  return plugins.map((p: JsPlugin) => p[hookName]).filter(Boolean);\n}\n"]}
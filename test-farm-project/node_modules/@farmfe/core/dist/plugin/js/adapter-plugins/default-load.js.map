{"version":3,"file":"default-load.js","sourceRoot":"","sources":["../../../../src/plugin/js/adapter-plugins/default-load.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,YAAY,EAAE,MAAM,SAAS,CAAC;AACnD,OAAO,EAAE,UAAU,EAAE,MAAM,WAAW,CAAC;AAIvC,OAAO,EACL,+BAA+B,EAC/B,gBAAgB,EAChB,mBAAmB,EACpB,MAAM,aAAa,CAAC;AACrB,OAAO,EAAE,iBAAiB,EAAE,MAAM,2BAA2B,CAAC;AAE9D,MAAM,UAAU,iBAAiB,CAAC,OAIjC;IACC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC;IACrD,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;IAExE,OAAO;QACL,IAAI,EAAE,WAAW;QACjB,yBAAyB;QACzB,QAAQ,EAAE,CAAC,GAAG;QACd,IAAI,EAAE;YACJ,OAAO,EAAE;gBACP,aAAa;aACd;YACD,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE;gBACzB,MAAM,EAAE,YAAY,EAAE,GAAG,MAAM,CAAC;gBAEhC,+CAA+C;gBAC/C,IACE,iBAAiB,CAAC,2BAA2B,CAAC,YAAY,CAAC;oBAC3D,CAAC,UAAU,CAAC,YAAY,CAAC,EACzB;oBACA,0FAA0F;oBAC1F,4EAA4E;oBAC5E,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE;wBAC7B,MAAM,CAAC,IAAI,CACT,2BAA2B,YAAY,0EAA0E,YAAY,wCAAwC,CACtK,CAAC;wBACF,OAAO;4BACL,OAAO,EAAE,0CAA0C,YAAY,KAAK;4BACpE,UAAU,EAAE,IAAI;yBACjB,CAAC;qBACH;oBAED,OAAO,IAAI,CAAC;iBACb;gBAED,MAAM,OAAO,GAAG,YAAY,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;gBAEpD,OAAO;oBACL,OAAO;oBACP,UAAU,EAAE,+BAA+B;iBAC5C,CAAC;YACJ,CAAC;SACF;QACD,SAAS,EAAE;YACT,OAAO,EAAE;gBACP,aAAa;gBACb,WAAW,EAAE,EAAE;aAChB;YACD,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE;gBACzB,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,YAAY,EAAE,GAAG,MAAM,CAAC;gBAE/D,+CAA+C;gBAC/C,IAAI,iBAAiB,CAAC,2BAA2B,CAAC,YAAY,CAAC,EAAE;oBAC/D,OAAO,IAAI,CAAC;iBACb;gBACD,MAAM,UAAU,GAAG,UAAU,CAAC,WAAW,EAAE,GAAG,EAAE,OAAO,EAAE,KAAK,IAAI;oBAChE,mCAAmC;iBACpC,CAAC;gBACF,qDAAqD;gBACrD,MAAM,YAAY,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAC3C,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAC/B,CAAC;gBAEF,uCAAuC;gBACvC,4CAA4C;gBAC5C,IAAI,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,EAAE;oBAC/C,OAAO;wBACL,OAAO;wBACP,UAAU,EAAE,KAAK;qBAClB,CAAC;iBACH;gBAED,OAAO;oBACL,OAAO;oBACP,UAAU;iBACX,CAAC;YACJ,CAAC;SACF;KACF,CAAC;AACJ,CAAC","sourcesContent":["import { existsSync, readFileSync } from 'node:fs';\nimport { isAbsolute } from 'node:path';\nimport { UserConfig } from '../../../config/types.js';\nimport { Logger } from '../../../utils/logger.js';\nimport { JsPlugin } from '../../type.js';\nimport {\n  VITE_PLUGIN_DEFAULT_MODULE_TYPE,\n  getCssModuleType,\n  normalizeFilterPath\n} from '../utils.js';\nimport { VitePluginAdapter } from '../vite-plugin-adapter.js';\n\nexport function defaultLoadPlugin(options: {\n  filtersUnion: Set<string>;\n  logger: Logger;\n  userConfig: UserConfig;\n}): JsPlugin {\n  const { filtersUnion, logger, userConfig } = options;\n  const resolvedPaths = Array.from(filtersUnion).map(normalizeFilterPath);\n\n  return {\n    name: 'farm:load',\n    // has to be the last one\n    priority: -100,\n    load: {\n      filters: {\n        resolvedPaths\n      },\n      executor: async (params) => {\n        const { resolvedPath } = params;\n\n        // skip lazy compiled module and non-exist file\n        if (\n          VitePluginAdapter.isFarmInternalVirtualModule(resolvedPath) ||\n          !existsSync(resolvedPath)\n        ) {\n          // for virtual modules that is not loaded by plugins, it should be treated as empty module\n          // cause vite does not require load, vite can handle requests in middlewares\n          if (!isAbsolute(resolvedPath)) {\n            logger.info(\n              `No plugins load virtual ${resolvedPath} in load hook. Farm load it as \"export default await import('/@id/' + '${resolvedPath}');\" by default for Vite Compatibility`\n            );\n            return {\n              content: `export default await import('/@id/' + '${resolvedPath}');`,\n              moduleType: 'js'\n            };\n          }\n\n          return null;\n        }\n\n        const content = readFileSync(resolvedPath, 'utf-8');\n\n        return {\n          content,\n          moduleType: VITE_PLUGIN_DEFAULT_MODULE_TYPE\n        };\n      }\n    },\n    transform: {\n      filters: {\n        resolvedPaths,\n        moduleTypes: []\n      },\n      executor: async (params) => {\n        const { content, moduleId, moduleType, resolvedPath } = params;\n\n        // skip lazy compiled module and non-exist file\n        if (VitePluginAdapter.isFarmInternalVirtualModule(resolvedPath)) {\n          return null;\n        }\n        const cssModules = userConfig.compilation?.css?.modules?.paths ?? [\n          '\\\\.module\\\\.(css|less|sass|scss)$'\n        ];\n        // skip css module because it will be handled by Farm\n        const isCssModules = cssModules.some((reg) =>\n          new RegExp(reg).test(moduleId)\n        );\n\n        // treat all scss/less/.etc lang as css\n        // plugin should handle css module by itself\n        if (getCssModuleType(moduleId) && !isCssModules) {\n          return {\n            content,\n            moduleType: 'css'\n          };\n        }\n\n        return {\n          content,\n          moduleType\n        };\n      }\n    }\n  };\n}\n"]}
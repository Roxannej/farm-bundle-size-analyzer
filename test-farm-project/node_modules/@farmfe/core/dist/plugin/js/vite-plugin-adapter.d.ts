import type { ResolvedUserConfig, UserConfig } from '../../config/types.js';
import type { Server } from '../../server/index.js';
import { JsPlugin } from '../type.js';
import type { Plugin } from 'vite';
import { CompilationMode } from '../../config/env.js';
import { Logger } from '../../index.js';
export declare class VitePluginAdapter implements JsPlugin {
    name: string;
    priority: number;
    private _rawPlugin;
    private _farmConfig;
    private _viteConfig;
    private _viteDevServer;
    private _logger;
    private _moduleGraph;
    buildStart: JsPlugin['buildStart'];
    resolve: JsPlugin['resolve'];
    load: JsPlugin['load'];
    transform: JsPlugin['transform'];
    buildEnd: JsPlugin['buildEnd'];
    finish: JsPlugin['finish'];
    updateModules: JsPlugin['updateModules'];
    renderResourcePot: JsPlugin['renderResourcePot'];
    renderStart: JsPlugin['renderStart'];
    augmentResourceHash?: JsPlugin['augmentResourceHash'];
    finalizeResources: JsPlugin['finalizeResources'];
    writeResources: JsPlugin['writeResources'];
    transformHtml: JsPlugin['transformHtml'];
    filters: string[];
    constructor(rawPlugin: Plugin, farmConfig: UserConfig, filters: string[], logger: Logger, mode: CompilationMode);
    get api(): any;
    config(config: UserConfig): Promise<UserConfig>;
    configResolved(config: ResolvedUserConfig): Promise<void>;
    configureDevServer(devServer: Server): Promise<void>;
    private getViteConfigEnv;
    private shouldExecutePlugin;
    private wrapExecutor;
    private wrapRawPluginHook;
    private viteBuildStartToFarmBuildStart;
    private viteResolveIdToFarmResolve;
    private viteLoadToFarmLoad;
    private viteTransformToFarmTransform;
    private viteBuildEndToFarmBuildEnd;
    private viteHandleHotUpdateToFarmUpdateModules;
    private viteHandleRenderChunkToFarmRenderResourcePot;
    private viteRenderStartToFarmRenderStart;
    private viteAugmentChunkHashToFarmAugmentResourceHash;
    private viteGenerateBundleToFarmFinalizeResources;
    private viteTransformIndexHtmlToFarmTransformHtml;
    private viteWriteCloseBundleToFarmWriteResources;
    private callViteTransformIndexHtmlHook;
    static isFarmInternalVirtualModule(id: string): boolean;
}

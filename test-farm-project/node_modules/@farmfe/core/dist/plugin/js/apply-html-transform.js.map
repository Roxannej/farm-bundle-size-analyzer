{"version":3,"file":"apply-html-transform.js","sourceRoot":"","sources":["../../../src/plugin/js/apply-html-transform.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license MIT Copyright (c) 2019-present, Yuxi (Evan) You and Vite contributors.\n * This file is the same as https://github.com/vitejs/vite/blob/main/packages/vite/src/node/plugins/html.ts#L1185\n */\n\nexport interface HtmlTagDescriptor {\n  tag: string;\n  attrs?: Record<string, string | boolean | undefined>;\n  children?: string | HtmlTagDescriptor[];\n  /**\n   * default: 'head-prepend'\n   */\n  injectTo?: 'head' | 'body' | 'head-prepend' | 'body-prepend';\n}\n\nexport function applyHtmlTransform(\n  html: string,\n  res: HtmlTagDescriptor[] | { html: string; tags: HtmlTagDescriptor[] }\n): string {\n  let tags: HtmlTagDescriptor[];\n  if (Array.isArray(res)) {\n    tags = res;\n  } else {\n    html = res.html || html;\n    tags = res.tags;\n  }\n\n  let headTags: HtmlTagDescriptor[] | undefined;\n  let headPrependTags: HtmlTagDescriptor[] | undefined;\n  let bodyTags: HtmlTagDescriptor[] | undefined;\n  let bodyPrependTags: HtmlTagDescriptor[] | undefined;\n\n  for (const tag of tags) {\n    switch (tag.injectTo) {\n      case 'body':\n        (bodyTags ??= []).push(tag);\n        break;\n      case 'body-prepend':\n        (bodyPrependTags ??= []).push(tag);\n        break;\n      case 'head':\n        (headTags ??= []).push(tag);\n        break;\n      default:\n        (headPrependTags ??= []).push(tag);\n    }\n  }\n\n  if (headPrependTags) html = injectToHead(html, headPrependTags, true);\n  if (headTags) html = injectToHead(html, headTags);\n  if (bodyPrependTags) html = injectToBody(html, bodyPrependTags, true);\n  if (bodyTags) html = injectToBody(html, bodyTags);\n\n  return html;\n}\n\nconst headInjectRE = /([ \\t]*)<\\/head>/i;\nconst headPrependInjectRE = /([ \\t]*)<head[^>]*>/i;\n\nconst htmlInjectRE = /<\\/html>/i;\nconst htmlPrependInjectRE = /([ \\t]*)<html[^>]*>/i;\n\nconst bodyInjectRE = /([ \\t]*)<\\/body>/i;\nconst bodyPrependInjectRE = /([ \\t]*)<body[^>]*>/i;\n\nconst doctypePrependInjectRE = /<!doctype html>/i;\n\nfunction injectToHead(\n  html: string,\n  tags: HtmlTagDescriptor[],\n  prepend = false\n) {\n  if (tags.length === 0) return html;\n\n  if (prepend) {\n    // inject as the first element of head\n    if (headPrependInjectRE.test(html)) {\n      return html.replace(\n        headPrependInjectRE,\n        (match, p1) => `${match}\\n${serializeTags(tags, incrementIndent(p1))}`\n      );\n    }\n  } else {\n    // inject before head close\n    if (headInjectRE.test(html)) {\n      // respect indentation of head tag\n      return html.replace(\n        headInjectRE,\n        (match, p1) => `${serializeTags(tags, incrementIndent(p1))}${match}`\n      );\n    }\n    // try to inject before the body tag\n    if (bodyPrependInjectRE.test(html)) {\n      return html.replace(\n        bodyPrependInjectRE,\n        (match, p1) => `${serializeTags(tags, p1)}\\n${match}`\n      );\n    }\n  }\n  // if no head tag is present, we prepend the tag for both prepend and append\n  return prependInjectFallback(html, tags);\n}\n\nfunction injectToBody(\n  html: string,\n  tags: HtmlTagDescriptor[],\n  prepend = false\n) {\n  if (tags.length === 0) return html;\n\n  if (prepend) {\n    // inject after body open\n    if (bodyPrependInjectRE.test(html)) {\n      return html.replace(\n        bodyPrependInjectRE,\n        (match, p1) => `${match}\\n${serializeTags(tags, incrementIndent(p1))}`\n      );\n    }\n    // if no there is no body tag, inject after head or fallback to prepend in html\n    if (headInjectRE.test(html)) {\n      return html.replace(\n        headInjectRE,\n        (match, p1) => `${match}\\n${serializeTags(tags, p1)}`\n      );\n    }\n    return prependInjectFallback(html, tags);\n  } else {\n    // inject before body close\n    if (bodyInjectRE.test(html)) {\n      return html.replace(\n        bodyInjectRE,\n        (match, p1) => `${serializeTags(tags, incrementIndent(p1))}${match}`\n      );\n    }\n    // if no body tag is present, append to the html tag, or at the end of the file\n    if (htmlInjectRE.test(html)) {\n      return html.replace(htmlInjectRE, `${serializeTags(tags)}\\n$&`);\n    }\n    return html + `\\n` + serializeTags(tags);\n  }\n}\n\nfunction prependInjectFallback(html: string, tags: HtmlTagDescriptor[]) {\n  // prepend to the html tag, append after doctype, or the document start\n  if (htmlPrependInjectRE.test(html)) {\n    return html.replace(htmlPrependInjectRE, `$&\\n${serializeTags(tags)}`);\n  }\n  if (doctypePrependInjectRE.test(html)) {\n    return html.replace(doctypePrependInjectRE, `$&\\n${serializeTags(tags)}`);\n  }\n  return serializeTags(tags) + html;\n}\n\nconst unaryTags = new Set(['link', 'meta', 'base']);\n\nfunction serializeTag(\n  { tag, attrs, children }: HtmlTagDescriptor,\n  indent = ''\n): string {\n  if (unaryTags.has(tag)) {\n    return `<${tag}${serializeAttrs(attrs)}>`;\n  } else {\n    return `<${tag}${serializeAttrs(attrs)}>${serializeTags(\n      children,\n      incrementIndent(indent)\n    )}</${tag}>`;\n  }\n}\n\nfunction serializeTags(\n  tags: HtmlTagDescriptor['children'],\n  indent = ''\n): string {\n  if (typeof tags === 'string') {\n    return tags;\n  } else if (tags && tags.length) {\n    return tags\n      .map((tag) => `${indent}${serializeTag(tag, indent)}\\n`)\n      .join('');\n  }\n  return '';\n}\n\nfunction serializeAttrs(attrs: HtmlTagDescriptor['attrs']): string {\n  let res = '';\n  for (const key in attrs) {\n    if (typeof attrs[key] === 'boolean') {\n      res += attrs[key] ? ` ${key}` : ``;\n    } else {\n      res += ` ${key}=${JSON.stringify(attrs[key])}`;\n    }\n  }\n  return res;\n}\n\nfunction incrementIndent(indent = '') {\n  return `${indent}${indent[0] === '\\t' ? '\\t' : '  '}`;\n}\n"]}
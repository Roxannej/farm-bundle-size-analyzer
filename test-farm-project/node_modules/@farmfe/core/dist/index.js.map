{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["export * from './compiler/index.js';\nexport * from './config/index.js';\nexport * from './server/index.js';\nexport * from './plugin/type.js';\nexport * from './utils/index.js';\nexport type {\n  ModuleType,\n  ResolveKind,\n  PluginLoadHookParam,\n  PluginLoadHookResult,\n  PluginResolveHookParam,\n  PluginResolveHookResult,\n  OutputConfig,\n  ResolveConfig,\n  RuntimeConfig,\n  ScriptConfig,\n  CssConfig,\n  PersistentCacheConfig,\n  PartialBundlingConfig,\n  PresetEnvConfig,\n  Config,\n  PluginTransformHookParam,\n  PluginTransformHookResult\n} from './types/binding.js';\n\nimport { statSync } from 'node:fs';\nimport fs from 'node:fs/promises';\nimport path from 'node:path';\nimport fse from 'fs-extra';\n\nimport { Compiler } from './compiler/index.js';\nimport { loadEnv, setProcessEnv } from './config/env.js';\nimport {\n  UserConfig,\n  checkClearScreen,\n  getConfigFilePath,\n  normalizePublicDir,\n  resolveConfig\n} from './config/index.js';\nimport { Server } from './server/index.js';\nimport { compilerHandler } from './utils/build.js';\nimport { colors } from './utils/color.js';\nimport { Logger } from './utils/logger.js';\nimport { FileWatcher } from './watcher/index.js';\n\nimport { __FARM_GLOBAL__ } from './config/_global.js';\nimport type {\n  FarmCLIOptions,\n  ResolvedUserConfig,\n  UserPreviewServerConfig\n} from './config/types.js';\nimport { logError } from './server/error.js';\nimport { lazyCompilation } from './server/middlewares/lazy-compilation.js';\nimport { ConfigWatcher } from './watcher/config-watcher.js';\n\nimport type { JsPlugin } from './plugin/type.js';\nimport { resolveHostname } from './utils/http.js';\n\nexport async function start(\n  inlineConfig?: FarmCLIOptions & UserConfig\n): Promise<void> {\n  inlineConfig = inlineConfig ?? {};\n  const logger = inlineConfig.logger ?? new Logger();\n  setProcessEnv('development');\n\n  try {\n    const resolvedUserConfig = await resolveConfig(\n      inlineConfig,\n      'development',\n      logger\n    );\n\n    if (\n      resolvedUserConfig.compilation.lazyCompilation &&\n      typeof resolvedUserConfig.server?.host === 'string'\n    ) {\n      setLazyCompilationDefine(resolvedUserConfig);\n    }\n\n    const compiler = await createCompiler(resolvedUserConfig, logger);\n\n    const devServer = await createDevServer(\n      compiler,\n      resolvedUserConfig,\n      logger\n    );\n\n    await devServer.listen();\n  } catch (error) {\n    logger.error('Failed to start the server', { exit: true, error });\n  }\n}\n\nexport async function build(\n  inlineConfig?: FarmCLIOptions & UserConfig\n): Promise<void> {\n  inlineConfig = inlineConfig ?? {};\n  const logger = inlineConfig.logger ?? new Logger();\n  setProcessEnv('production');\n\n  const resolvedUserConfig = await resolveConfig(\n    inlineConfig,\n    'production',\n    logger,\n    false\n  );\n\n  try {\n    await createBundleHandler(resolvedUserConfig, logger);\n    // copy resources under publicDir to output.path\n    await copyPublicDirectory(resolvedUserConfig, logger);\n  } catch (err) {\n    logger.error(`Failed to build: ${err}`, { exit: true });\n  }\n}\n\nexport async function preview(inlineConfig?: FarmCLIOptions): Promise<void> {\n  inlineConfig = inlineConfig ?? {};\n  const logger = inlineConfig.logger ?? new Logger();\n  const resolvedUserConfig = await resolveConfig(\n    inlineConfig,\n    'production',\n    logger\n  );\n\n  const { root, output } = resolvedUserConfig.compilation;\n  const distDir = path.resolve(root, output.path);\n\n  try {\n    statSync(distDir);\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      throw new Error(\n        `The directory \"${distDir}\" does not exist. Did you build your project?`\n      );\n    }\n  }\n\n  // reusing port conflict check from DevServer\n  const serverConfig = {\n    ...resolvedUserConfig.server,\n    host: inlineConfig.host ?? true,\n    port:\n      inlineConfig.port ??\n      (Number(process.env.FARM_DEFAULT_SERVER_PORT) || 1911)\n  };\n  await Server.resolvePortConflict(serverConfig, logger);\n  const port = serverConfig.port;\n  const host = serverConfig.host;\n  const previewOptions: UserPreviewServerConfig = {\n    ...serverConfig,\n    distDir,\n    output: { path: output.path, publicPath: output.publicPath },\n    port,\n    host\n  };\n\n  const server = new Server({ logger });\n  server.createPreviewServer(previewOptions);\n}\n\nexport async function watch(\n  inlineConfig?: FarmCLIOptions & UserConfig\n): Promise<void> {\n  inlineConfig = inlineConfig ?? {};\n  const logger = inlineConfig.logger ?? new Logger();\n  setProcessEnv('development');\n\n  inlineConfig.server ??= {};\n  inlineConfig.server.hmr ??= false;\n\n  const resolvedUserConfig = await resolveConfig(\n    inlineConfig,\n    'development',\n    logger,\n    false\n  );\n\n  const lazyEnabled = resolvedUserConfig.compilation?.lazyCompilation;\n\n  if (lazyEnabled) {\n    setLazyCompilationDefine(resolvedUserConfig);\n  }\n\n  const compilerFileWatcher = await createBundleHandler(\n    resolvedUserConfig,\n    logger,\n    true\n  );\n\n  let devServer: Server | undefined;\n  // create dev server for lazy compilation\n  if (lazyEnabled) {\n    devServer = new Server({\n      logger,\n      compiler: compilerFileWatcher.serverOrCompiler as Compiler\n    });\n    devServer.createServer(resolvedUserConfig.server);\n    devServer.applyMiddlewares([lazyCompilation]);\n    await devServer.startServer(resolvedUserConfig.server);\n  }\n\n  async function handleFileChange(files: string[]) {\n    logFileChanges(files, resolvedUserConfig.root, logger);\n\n    try {\n      farmWatcher.close();\n\n      if (lazyEnabled && devServer) {\n        devServer.close();\n      }\n\n      __FARM_GLOBAL__.__FARM_RESTART_DEV_SERVER__ = true;\n\n      compilerFileWatcher?.close();\n\n      await watch(inlineConfig);\n    } catch (error) {\n      logger.error(`Error restarting the watcher: ${error.message}`);\n    }\n  }\n\n  const farmWatcher = new ConfigWatcher(resolvedUserConfig).watch(\n    handleFileChange\n  );\n}\n\nexport async function clean(\n  rootPath: string,\n  recursive?: boolean | undefined\n): Promise<void> {\n  // TODO After optimizing the reading of config, put the clean method into compiler\n  const logger = new Logger();\n\n  const nodeModulesFolders = recursive\n    ? await findNodeModulesRecursively(rootPath)\n    : [path.join(rootPath, 'node_modules')];\n\n  await Promise.all(\n    nodeModulesFolders.map(async (nodeModulesPath) => {\n      // TODO Bug .farm cacheDir folder not right\n      const farmFolderPath = path.join(nodeModulesPath, '.farm');\n      try {\n        const stats = await fs.stat(farmFolderPath);\n        if (stats.isDirectory()) {\n          await fs.rm(farmFolderPath, { recursive: true, force: true });\n          // TODO optimize nodeModulePath path e.g: /Users/xxx/node_modules/.farm/cache\n          logger.info(\n            `Cache cleaned at ${colors.bold(colors.green(nodeModulesPath))}`\n          );\n        }\n      } catch (error) {\n        if (error.code === 'ENOENT') {\n          logger.warn(\n            `No cached files found in ${colors.bold(\n              colors.green(nodeModulesPath)\n            )}`\n          );\n        } else {\n          logger.error(\n            `Error cleaning cache in ${colors.bold(\n              colors.green(nodeModulesPath)\n            )}: ${error.message}`\n          );\n        }\n      }\n    })\n  );\n}\n\nasync function findNodeModulesRecursively(rootPath: string): Promise<string[]> {\n  const result: string[] = [];\n\n  async function traverse(currentPath: string) {\n    const items = await fs.readdir(currentPath);\n    for (const item of items) {\n      const fullPath = path.join(currentPath, item);\n      const stats = await fs.stat(fullPath);\n\n      if (stats.isDirectory()) {\n        if (item === 'node_modules') {\n          result.push(fullPath);\n        } else {\n          await traverse(fullPath);\n        }\n      }\n    }\n  }\n\n  await traverse(rootPath);\n  return result;\n}\n\nexport async function createBundleHandler(\n  resolvedUserConfig: ResolvedUserConfig,\n  logger: Logger,\n  watchMode = false\n) {\n  const compiler = await createCompiler(resolvedUserConfig, logger);\n\n  await compilerHandler(\n    async () => {\n      if (resolvedUserConfig.compilation?.output?.clean) {\n        compiler.removeOutputPathDir();\n      }\n      try {\n        await compiler.compile();\n      } catch (err) {\n        throw new Error(logError(err) as unknown as string);\n      }\n      compiler.writeResourcesToDisk();\n    },\n    resolvedUserConfig,\n    logger\n  );\n\n  if (resolvedUserConfig.compilation?.watch || watchMode) {\n    const watcher = new FileWatcher(compiler, resolvedUserConfig, logger);\n    await watcher.watch();\n    return watcher;\n  }\n}\n\nexport async function createCompiler(\n  resolvedUserConfig: ResolvedUserConfig,\n  logger: Logger\n) {\n  const {\n    jsPlugins,\n    rustPlugins,\n    compilation: compilationConfig\n  } = resolvedUserConfig;\n\n  const compiler = new Compiler(\n    {\n      config: compilationConfig,\n      jsPlugins,\n      rustPlugins\n    },\n    logger\n  );\n\n  for (const plugin of jsPlugins) {\n    await plugin.configureCompiler?.(compiler);\n  }\n\n  return compiler;\n}\n\nasync function copyPublicDirectory(\n  resolvedUserConfig: ResolvedUserConfig,\n  logger: Logger\n): Promise<void> {\n  const absPublicDirPath = normalizePublicDir(\n    resolvedUserConfig.root,\n    resolvedUserConfig.publicDir\n  );\n\n  try {\n    if (await fse.pathExists(absPublicDirPath)) {\n      const files = await fse.readdir(absPublicDirPath);\n      const outputPath = resolvedUserConfig.compilation.output.path;\n      for (const file of files) {\n        const publicFile = path.join(absPublicDirPath, file);\n        const destFile = path.join(outputPath, file);\n\n        if (await fse.pathExists(destFile)) {\n          continue;\n        }\n        await fse.copy(publicFile, destFile);\n      }\n\n      logger.info(\n        `Public directory resources copied ${colors.bold(\n          colors.green('successfully')\n        )}.`\n      );\n    }\n  } catch (error) {\n    logger.error(`Error copying public directory: ${error.message}`);\n  }\n}\n\nexport async function createDevServer(\n  compiler: Compiler,\n  resolvedUserConfig: ResolvedUserConfig,\n  logger: Logger\n) {\n  const server = new Server({ compiler, logger });\n  await server.createDevServer(resolvedUserConfig.server);\n  await createFileWatcher(server, resolvedUserConfig, logger);\n  // call configureDevServer hook after both server and watcher are ready\n  resolvedUserConfig.jsPlugins.forEach((plugin: JsPlugin) =>\n    plugin.configureDevServer?.(server)\n  );\n\n  return server;\n}\n\nexport async function createFileWatcher(\n  devServer: Server,\n  resolvedUserConfig: ResolvedUserConfig,\n  logger: Logger = new Logger()\n) {\n  if (\n    devServer.config.hmr &&\n    resolvedUserConfig.compilation.mode === 'production'\n  ) {\n    logger.error('HMR cannot be enabled in production mode.');\n    return;\n  }\n\n  if (!devServer.config.hmr) {\n    return;\n  }\n\n  if (devServer.watcher) {\n    return;\n  }\n\n  const fileWatcher = new FileWatcher(devServer, resolvedUserConfig, logger);\n  devServer.watcher = fileWatcher;\n  await fileWatcher.watch();\n\n  const configFilePath = await getConfigFilePath(resolvedUserConfig.root);\n  const farmWatcher = new ConfigWatcher({\n    ...resolvedUserConfig,\n    configFilePath\n  });\n  farmWatcher.watch(async (files: string[]) => {\n    checkClearScreen(resolvedUserConfig);\n\n    devServer.restart(async () => {\n      logFileChanges(files, resolvedUserConfig.root, logger);\n      farmWatcher?.close();\n\n      await devServer.close();\n      __FARM_GLOBAL__.__FARM_RESTART_DEV_SERVER__ = true;\n      // TODO: resolvedUserConfig params type check\n      await start(resolvedUserConfig as unknown as FarmCLIOptions & UserConfig);\n    });\n  });\n  return fileWatcher;\n}\n\nexport function logFileChanges(files: string[], root: string, logger: Logger) {\n  const changedFiles = files\n    .map((file) => path.relative(root, file))\n    .join(', ');\n  logger.info(\n    colors.bold(colors.green(`${changedFiles} changed, server will restart.`))\n  );\n}\n\nfunction setLazyCompilationDefine(resolvedUserConfig: ResolvedUserConfig) {\n  const hostname = resolveHostname(resolvedUserConfig.server.host);\n  resolvedUserConfig.compilation.define = {\n    ...(resolvedUserConfig.compilation.define ?? {}),\n    FARM_LAZY_COMPILE_SERVER_URL: `${\n      resolvedUserConfig.server.protocol || 'http'\n    }://${hostname.host || 'localhost'}:${resolvedUserConfig.server.port}`\n  };\n}\n\nexport { defineFarmConfig as defineConfig } from './config/index.js';\n\nexport { loadEnv };\n"]}
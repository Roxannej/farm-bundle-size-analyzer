{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/compiler/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { existsSync, mkdirSync, rmSync, writeFileSync } from 'node:fs';\nimport path from 'node:path';\nimport { Compiler as BindingCompiler } from '../../binding/index.js';\n\nimport type { Resource } from '../index.js';\nimport type { Config, JsUpdateResult } from '../types/binding.js';\nimport { type ILogger, Logger } from '../utils/logger.js';\n\nexport const VIRTUAL_FARM_DYNAMIC_IMPORT_SUFFIX =\n  '.farm_dynamic_import_virtual_module';\n\n/**\n * Cause the update process is async, we need to keep the update queue to make sure the update process is executed in order.\n * So the latter update process will not override the previous one if they are updating at the same time.\n */\nexport interface UpdateQueueItem {\n  paths: string[];\n  resolve: (res: JsUpdateResult) => void;\n}\n\nexport interface TracedModuleGraph {\n  root: string;\n  modules: Array<{\n    id: string;\n    contentHash: string;\n    packageName: string;\n    packageVersion: string;\n  }>;\n  edges: Record<string, string[]>;\n  reverseEdges: Record<string, string[]>;\n}\n\nexport class Compiler {\n  private _bindingCompiler: BindingCompiler;\n  private _updateQueue: UpdateQueueItem[] = [];\n  private _onUpdateFinishQueue: (() => void | Promise<void>)[] = [];\n\n  public compiling = false;\n\n  constructor(\n    public config: Config,\n    private logger: ILogger = new Logger()\n  ) {\n    this._bindingCompiler = new BindingCompiler(this.config);\n  }\n\n  async traceDependencies() {\n    return this._bindingCompiler.traceDependencies();\n  }\n\n  async traceModuleGraph(): Promise<TracedModuleGraph> {\n    return this._bindingCompiler.traceModuleGraph() as TracedModuleGraph;\n  }\n\n  async compile() {\n    if (this.compiling) {\n      this.logger.error('Already compiling', {\n        exit: true\n      });\n    }\n\n    this.compiling = true;\n    if (process.env.FARM_PROFILE) {\n      this._bindingCompiler.compileSync();\n    } else {\n      await this._bindingCompiler.compile();\n    }\n    this.compiling = false;\n  }\n\n  compileSync() {\n    if (this.compiling) {\n      this.logger.error('Already compiling', {\n        exit: true\n      });\n    }\n    this.compiling = true;\n    this._bindingCompiler.compileSync();\n    this.compiling = false;\n  }\n\n  async update(\n    paths: string[],\n    sync = false,\n    ignoreCompilingCheck = false,\n    generateUpdateResource = true\n  ): Promise<JsUpdateResult> {\n    let resolve: (res: JsUpdateResult) => void;\n\n    const promise = new Promise<JsUpdateResult>((r) => {\n      resolve = r;\n    });\n\n    // if there is already a update process, we need to wait for it to finish\n    if (this.compiling && !ignoreCompilingCheck) {\n      this._updateQueue.push({ paths, resolve });\n      return promise;\n    }\n    this.compiling = true;\n    try {\n      const res = await this._bindingCompiler.update(\n        paths,\n        async () => {\n          const next = this._updateQueue.shift();\n\n          if (next) {\n            await this.update(\n              next.paths,\n              true,\n              true,\n              generateUpdateResource\n            ).then(next.resolve);\n          } else {\n            this.compiling = false;\n            while (this._onUpdateFinishQueue.length) {\n              if (this.compiling) {\n                break;\n              }\n              const cb = this._onUpdateFinishQueue.shift();\n              await cb();\n            }\n          }\n        },\n        sync,\n        generateUpdateResource\n      );\n\n      return res as JsUpdateResult;\n    } catch (e) {\n      this.compiling = false;\n      throw e;\n    }\n  }\n\n  hasModule(resolvedPath: string): boolean {\n    return this._bindingCompiler.hasModule(resolvedPath);\n  }\n\n  getParentFiles(idOrResolvedPath: string): string[] {\n    return this._bindingCompiler.getParentFiles(idOrResolvedPath);\n  }\n\n  resources(): Record<string, Buffer> {\n    return this._bindingCompiler.resources();\n  }\n\n  resource(path: string): Buffer {\n    return this._bindingCompiler.resource(path);\n  }\n\n  resourcesMap(): Record<string, Resource> {\n    return this._bindingCompiler.resourcesMap() as Record<string, Resource>;\n  }\n\n  writeResourcesToDisk(): void {\n    const resources = this.resources();\n    const configOutputPath = this.config.config.output.path;\n    const outputPath = path.isAbsolute(configOutputPath)\n      ? configOutputPath\n      : path.join(this.config.config.root, configOutputPath);\n\n    for (const [name, resource] of Object.entries(resources)) {\n      // remove query params and hash of name\n      const nameWithoutQuery = name.split('?')[0];\n      const nameWithoutHash = nameWithoutQuery.split('#')[0];\n\n      let filePath = path.join(outputPath, nameWithoutHash);\n      if (!existsSync(path.dirname(filePath))) {\n        mkdirSync(path.dirname(filePath), { recursive: true });\n      }\n\n      writeFileSync(filePath, resource);\n    }\n\n    this.callWriteResourcesHook();\n  }\n\n  callWriteResourcesHook() {\n    for (const jsPlugin of this.config.jsPlugins ?? []) {\n      jsPlugin.writeResources?.executor?.({\n        resourcesMap: this._bindingCompiler.resourcesMap() as Record<\n          string,\n          Resource\n        >,\n        config: this.config.config\n      });\n    }\n  }\n\n  removeOutputPathDir() {\n    const outputPath = this.outputPath();\n    if (existsSync(outputPath)) {\n      rmSync(outputPath, { recursive: true });\n    }\n  }\n\n  resolvedWatchPaths(): string[] {\n    return this._bindingCompiler.watchModules();\n  }\n\n  resolvedModulePaths(root: string): string[] {\n    return this._bindingCompiler\n      .relativeModulePaths()\n      .map((p) => this.transformModulePath(root, p));\n  }\n\n  transformModulePath(root: string, p: string): string {\n    if (p.endsWith(VIRTUAL_FARM_DYNAMIC_IMPORT_SUFFIX)) {\n      p = p.slice(0, -VIRTUAL_FARM_DYNAMIC_IMPORT_SUFFIX.length);\n    }\n\n    if (path.isAbsolute(p)) {\n      return p;\n    }\n\n    if (p.includes('?')) {\n      return path.join(root, p.split('?')[0]);\n    }\n\n    return path.join(root, p);\n  }\n\n  onUpdateFinish(cb: () => void) {\n    this._onUpdateFinishQueue.push(cb);\n  }\n\n  outputPath() {\n    const { output, root } = this.config.config;\n    const configOutputPath = output.path;\n    const outputPath = path.isAbsolute(configOutputPath)\n      ? configOutputPath\n      : path.join(root, configOutputPath);\n    return outputPath;\n  }\n\n  addExtraWatchFile(root: string, paths: string[]) {\n    this._bindingCompiler.addWatchFiles(root, paths);\n  }\n\n  stats() {\n    return this._bindingCompiler.stats();\n  }\n\n  invalidateModule(moduleId: string) {\n    this._bindingCompiler.invalidateModule(moduleId);\n  }\n}\n"]}
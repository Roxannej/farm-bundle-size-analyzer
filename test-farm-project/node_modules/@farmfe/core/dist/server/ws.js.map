{"version":3,"file":"ws.js","sourceRoot":"","sources":["../../src/server/ws.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IncomingMessage } from 'node:http';\nimport type { Duplex } from 'node:stream';\nimport type { WebSocket as WebSocketRawType } from 'ws';\n\nimport { WebSocket, WebSocketServer as WebSocketServerRaw } from 'ws';\nimport { Logger, NormalizedServerConfig, red } from '../index.js';\nimport { HmrEngine } from './hmr-engine.js';\nimport { Server } from './type.js';\n\nimport type { ILogger } from '../index.js';\nimport { resolveHostname, resolveServerUrls } from '../utils/http.js';\n\nconst HMR_HEADER = 'farm_hmr';\n\nexport interface IWebSocketServer {\n  clients: Set<WebSocketClient>;\n  listen(): void;\n  send(payload: any): void;\n  send<T extends string>(event: T, payload?: any): void;\n  close(): Promise<void>;\n  on(event: string, listener: any): void;\n  off(event: string, listener: any): void;\n}\n\nconst wsServerEvents = [\n  'connection',\n  'error',\n  'headers',\n  'listening',\n  'message'\n];\nexport type WebSocketCustomListener<T> = (\n  data: T,\n  client: WebSocketClient\n) => void;\nexport interface WebSocketClient {\n  send(payload: any): void;\n  send(event: string, payload?: any['data']): void;\n  rawSend(str: string): void;\n  socket: WebSocketRawType;\n}\n\nexport default class WsServer implements IWebSocketServer {\n  public wss: WebSocketServerRaw;\n  public customListeners = new Map<string, Set<WebSocketCustomListener<any>>>();\n  public clientsMap = new WeakMap<WebSocketRawType, WebSocketClient>();\n  public bufferedError: any = null;\n  public logger: ILogger;\n  private hmrOrigins: string[];\n  constructor(\n    private httpServer: Server,\n    private config: NormalizedServerConfig,\n    private hmrEngine: HmrEngine,\n    logger?: ILogger\n  ) {\n    this.logger = logger ?? new Logger();\n    this.hmrOrigins = this.generateHMROrigins(config);\n    this.createWebSocketServer();\n  }\n\n  private generateHMROrigins(config: NormalizedServerConfig): string[] {\n    const { protocol, hostname, port } = config;\n    const origins = [];\n\n    // Add localhost with configured port\n    const urls = resolveServerUrls(this.httpServer, config);\n    const localUrls = [...(urls.local || []), ...(urls.network || [])];\n\n    for (const url of localUrls) {\n      origins.push(url);\n    }\n\n    // Add non-localhost origin\n    const configuredOrigin = `${protocol}://${hostname.name}:${port}`;\n\n    if (\n      hostname &&\n      hostname.name &&\n      localUrls.every((url) => url !== configuredOrigin)\n    ) {\n      origins.push(configuredOrigin);\n    }\n\n    if (this.config.host !== this.config.hmr.host) {\n      const hmrHostname = resolveHostname(this.config.hmr.host);\n      origins.push(\n        `${this.config.hmr?.protocol || protocol}://${hmrHostname.name}:${this.config.hmr?.port || this.config.port}`\n      );\n    }\n\n    return origins;\n  }\n\n  private createWebSocketServer() {\n    try {\n      const WebSocketServer = process.versions.bun\n        ? // @ts-expect-error: Bun defines `import.meta.require`\n          import.meta.require('ws').WebSocketServer\n        : WebSocketServerRaw;\n\n      if (this.config.host === this.config.hmr.host) {\n        this.wss = new WebSocketServer({ noServer: true });\n        this.connection();\n        this.httpServer.on('upgrade', this.upgradeWsServer.bind(this));\n      } else {\n        const hmrHostname = resolveHostname(this.config.hmr.host);\n        this.wss = new WebSocketServer({\n          host: hmrHostname.name,\n          port: this.config.hmr?.port || this.config.port\n        });\n        this.connection();\n      }\n    } catch (err) {\n      this.handleSocketError(err);\n    }\n  }\n\n  private upgradeWsServer(\n    request: IncomingMessage,\n    socket: Duplex,\n    head: Buffer\n  ) {\n    if (this.isHMRRequest(request)) {\n      this.handleHMRUpgrade(request, socket, head);\n    } else {\n      this.logger.error(\n        `HMR upgrade failed because of invalid HMR path, header or host. The HMR connection is only allowed on hosts: ${this.hmrOrigins.join(\n          ', '\n        )}. You can try set server.host or server.allowedHosts to allow the connection.`\n      );\n    }\n  }\n\n  listen() {\n    // TODO alone with use httpServer we need start this function\n    // Start listening for WebSocket connections\n  }\n\n  // Farm uses the `sendMessage` method in hmr and\n  // the send method is reserved for migration vite\n  send(...args: any[]) {\n    let payload: any;\n    if (typeof args[0] === 'string') {\n      payload = {\n        type: 'custom',\n        event: args[0],\n        data: args[1]\n      };\n    } else {\n      payload = args[0];\n    }\n\n    if (payload.type === 'error' && !this.wss.clients.size) {\n      this.bufferedError = payload;\n      return;\n    }\n\n    const stringified = JSON.stringify(payload);\n    this.wss.clients.forEach((client) => {\n      // readyState 1 means the connection is open\n      if (client.readyState === 1) {\n        client.send(stringified);\n      }\n    });\n  }\n\n  private isHMRRequest(request: IncomingMessage): boolean {\n    return (\n      request.url === this.config.hmr.path &&\n      request.headers['sec-websocket-protocol'] === HMR_HEADER\n    );\n  }\n\n  private handleHMRUpgrade(\n    request: IncomingMessage,\n    socket: Duplex,\n    head: Buffer\n  ) {\n    this.wss.handleUpgrade(request, socket, head, (ws: WebSocketRawType) => {\n      this.wss.emit('connection', ws, request);\n    });\n  }\n\n  get clients(): Set<WebSocketClient> {\n    return new Set(\n      Array.from(this.wss.clients).map(this.getSocketClient.bind(this))\n    );\n  }\n\n  // a custom method defined by farm to send custom events\n  public sendCustomEvent<T extends string>(event: T, payload?: any) {\n    // Send a custom event to all clients\n    this.send({ type: 'custom', event, data: payload });\n  }\n\n  public on(event: string, listener: (...args: any[]) => void) {\n    if (wsServerEvents.includes(event)) {\n      this.wss.on(event, listener);\n    } else {\n      this.addCustomEventListener(event, listener);\n    }\n  }\n\n  public off(event: string, listener: () => void) {\n    if (wsServerEvents.includes(event)) {\n      this.wss.off(event, listener);\n    } else {\n      this.removeCustomEventListener(event, listener);\n    }\n  }\n\n  connection() {\n    this.wss.on('connection', (socket: WebSocketRawType) => {\n      socket.on('message', (raw) => {\n        if (!this.customListeners.size) return;\n        let parsed: any;\n        try {\n          parsed = JSON.parse(String(raw));\n        } catch {\n          this.logger.error('Failed to parse WebSocket message: ' + raw);\n        }\n        // transform vite js-update to farm update\n        if (parsed?.type === 'js-update' && parsed?.path) {\n          this.hmrEngine.hmrUpdate(parsed.path, true);\n          return;\n        }\n\n        if (!parsed || parsed.type !== 'custom' || !parsed.event) return;\n        const listeners = this.customListeners.get(parsed.event);\n        if (!listeners?.size) return;\n        const client = this.getSocketClient(socket);\n        listeners.forEach((listener) => listener(parsed.data, client));\n      });\n\n      socket.on('error', (err: Error & { code: string }) => {\n        return this.handleSocketError(err);\n      });\n\n      socket.send(JSON.stringify({ type: 'connected' }));\n\n      if (this.bufferedError) {\n        socket.send(JSON.stringify(this.bufferedError));\n        this.bufferedError = null;\n      }\n    });\n  }\n\n  public async close() {\n    if (this.upgradeWsServer && this.httpServer) {\n      this.httpServer.off('upgrade', this.upgradeWsServer);\n    }\n    await this.terminateAllClients();\n    await this.closeWebSocketServer();\n    // TODO if not have httpServer we need close httpServer\n  }\n\n  private terminateAllClients() {\n    const terminatePromises = Array.from(this.wss.clients).map((client) => {\n      return new Promise((resolve) => {\n        if (client.readyState === WebSocket.OPEN) {\n          client.send(JSON.stringify({ type: 'closing' }));\n          client.close(1000, 'Server shutdown');\n        }\n        // Temporarily remove the direct shutdown of ws\n        // client.terminate();\n        client.once('close', () => resolve(true));\n      });\n    });\n    return Promise.all(terminatePromises);\n  }\n\n  private closeWebSocketServer() {\n    return new Promise((resolve, reject) => {\n      this.wss.close((err) => {\n        if (err) {\n          reject(err);\n        } else {\n          // TODO if not have httpServer\n          resolve(true);\n        }\n      });\n    });\n  }\n\n  private addCustomEventListener(event: string, listener: () => void) {\n    if (!this.customListeners.has(event)) {\n      this.customListeners.set(event, new Set());\n    }\n    this.customListeners.get(event).add(listener);\n  }\n\n  private removeCustomEventListener(event: string, listener: () => void) {\n    this.customListeners.get(event)?.delete(listener);\n  }\n\n  private getSocketClient(socket: WebSocketRawType) {\n    if (!this.clientsMap.has(socket)) {\n      this.clientsMap.set(socket, {\n        send: (...args) => this.sendMessage(socket, ...args),\n        socket,\n        rawSend: (str) => socket.send(str)\n      });\n    }\n    return this.clientsMap.get(socket);\n  }\n\n  private sendMessage(socket: WebSocketRawType, ...args: any[]) {\n    let payload: any;\n    if (typeof args[0] === 'string') {\n      payload = {\n        type: 'custom',\n        event: args[0],\n        data: args[1]\n      };\n    } else {\n      payload = args[0];\n    }\n    socket.send(JSON.stringify(payload));\n  }\n\n  private handleSocketError(err: Error & { code: string }) {\n    if (err.code === 'EADDRINUSE') {\n      this.logger.error(red(`WebSocket server error: Port is already in use`), {\n        error: err\n      });\n    } else {\n      this.logger.error(\n        red(`WebSocket server error:\\n${err.stack || err.message}`),\n        {\n          error: err\n        }\n      );\n    }\n  }\n}\n"]}
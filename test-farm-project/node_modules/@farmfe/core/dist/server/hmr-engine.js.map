{"version":3,"file":"hmr-engine.js","sourceRoot":"","sources":["../../src/server/hmr-engine.ts"],"names":[],"mappings":"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","sourcesContent":["import fse from 'fs-extra';\n// queue all updates and compile them one by one\n\nimport { stat } from 'node:fs/promises';\nimport { isAbsolute, relative } from 'node:path';\n\nimport { Compiler } from '../compiler/index.js';\nimport { checkClearScreen } from '../config/index.js';\nimport type { JsUpdateResult } from '../types/binding.js';\nimport {\n  Logger,\n  bold,\n  cyan,\n  getDynamicResources,\n  green\n} from '../utils/index.js';\nimport { logError } from './error.js';\nimport { Server } from './index.js';\nimport { WebSocketClient } from './ws.js';\n\nexport class HmrEngine {\n  private _updateQueue: string[] = [];\n  // private _updateResults: Map<string, { result: string; count: number }> =\n\n  private _compiler: Compiler;\n  private _devServer: Server;\n  private _onUpdates: ((result: JsUpdateResult) => void)[];\n\n  private _lastModifiedTimestamp: Map<string, string>;\n\n  constructor(\n    compiler: Compiler,\n    devServer: Server,\n    private _logger: Logger\n  ) {\n    this._compiler = compiler;\n    this._devServer = devServer;\n    // this._lastAttemptWasError = false;\n    this._lastModifiedTimestamp = new Map();\n  }\n\n  callUpdates(result: JsUpdateResult) {\n    this._onUpdates?.forEach((cb) => cb(result));\n  }\n\n  onUpdateFinish(cb: (result: JsUpdateResult) => void) {\n    if (!this._onUpdates) {\n      this._onUpdates = [];\n    }\n    this._onUpdates.push(cb);\n  }\n\n  recompileAndSendResult = async (): Promise<JsUpdateResult> => {\n    const queue = [...this._updateQueue];\n\n    if (queue.length === 0) {\n      return;\n    }\n\n    let updatedFilesStr = queue\n      .map((item) => {\n        if (isAbsolute(item)) {\n          return relative(this._compiler.config.config.root, item);\n        } else {\n          const resolvedPath = this._compiler.transformModulePath(\n            this._compiler.config.config.root,\n            item\n          );\n          return relative(this._compiler.config.config.root, resolvedPath);\n        }\n      })\n      .join(', ');\n    if (updatedFilesStr.length >= 100) {\n      updatedFilesStr =\n        updatedFilesStr.slice(0, 100) + `...(${queue.length} files)`;\n    }\n\n    try {\n      // we must add callback before update\n      this._compiler.onUpdateFinish(async () => {\n        // if there are more updates, recompile again\n        if (this._updateQueue.length > 0) {\n          await this.recompileAndSendResult();\n        }\n        if (this._devServer?.config?.writeToDisk) {\n          this._compiler.writeResourcesToDisk();\n        }\n      });\n\n      checkClearScreen(this._compiler.config.config);\n      const start = Date.now();\n      const result = await this._compiler.update(queue);\n      this._logger.info(\n        `${bold(cyan(updatedFilesStr))} updated in ${bold(\n          green(`${Date.now() - start}ms`)\n        )}`\n      );\n\n      // clear update queue after update finished\n      this._updateQueue = this._updateQueue.filter(\n        (item) => !queue.includes(item)\n      );\n\n      const { dynamicResources, dynamicModuleResourcesMap } =\n        getDynamicResources(result.dynamicResourcesMap);\n\n      const {\n        added,\n        changed,\n        removed,\n        immutableModules,\n        mutableModules,\n        boundaries\n      } = result;\n      const resultStr = `{\n        added: [${formatHmrResult(added)}],\n        changed: [${formatHmrResult(changed)}],\n        removed: [${formatHmrResult(removed)}],\n        immutableModules: ${JSON.stringify(immutableModules.trim())},\n        mutableModules: ${JSON.stringify(mutableModules.trim())},\n        boundaries: ${JSON.stringify(boundaries)},\n        dynamicResources: ${JSON.stringify(dynamicResources)},\n        dynamicModuleResourcesMap: ${JSON.stringify(dynamicModuleResourcesMap)}\n      }`;\n\n      this.callUpdates(result);\n\n      this._devServer.ws.clients.forEach((client: WebSocketClient) => {\n        client.rawSend(`\n        {\n          type: 'farm-update',\n          result: ${resultStr}\n        }\n      `);\n      });\n    } catch (err) {\n      checkClearScreen(this._compiler.config.config);\n      throw new Error(logError(err) as unknown as string);\n    }\n  };\n\n  async hmrUpdate(absPath: string | string[], force = false) {\n    const paths = Array.isArray(absPath) ? absPath : [absPath];\n\n    for (const path of paths) {\n      if (this._compiler.hasModule(path) && !this._updateQueue.includes(path)) {\n        if (fse.existsSync(path)) {\n          const lastModifiedTimestamp = this._lastModifiedTimestamp.get(path);\n          const currentTimestamp = (await stat(path)).mtime.toISOString();\n          // only update the file if the timestamp changed since last update\n          if (!force && lastModifiedTimestamp === currentTimestamp) {\n            continue;\n          }\n          this._lastModifiedTimestamp.set(path, currentTimestamp);\n        }\n        // push the path into the queue\n        this._updateQueue.push(path);\n      }\n    }\n\n    if (!this._compiler.compiling && this._updateQueue.length > 0) {\n      try {\n        await this.recompileAndSendResult();\n      } catch (e) {\n        // eslint-disable-next-line no-control-regex\n        const serialization = e.message.replace(/\\x1b\\[[0-9;]*m/g, '');\n        const errorStr = `${JSON.stringify({\n          message: serialization\n        })}`;\n        this._devServer.ws.clients.forEach((client: WebSocketClient) => {\n          client.rawSend(`\n            {\n              type: 'error',\n              err: ${errorStr},\n              overlay: ${this._devServer.config.hmr.overlay}\n            }\n          `);\n        });\n        this._logger.error(e);\n      }\n    }\n  }\n}\n\nfunction formatHmrResult(array: string[]) {\n  return array.map((item) => `'${item.replaceAll('\\\\', '\\\\\\\\')}'`).join(', ');\n}\n"]}
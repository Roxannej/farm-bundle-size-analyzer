{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/server/index.ts"],"names":[],"mappings":"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","sourcesContent":["import http from 'node:http';\nimport http2 from 'node:http2';\nimport * as httpsServer from 'node:https';\nimport Koa from 'koa';\nimport compression from 'koa-compress';\n\nimport path from 'node:path';\nimport { promisify } from 'node:util';\nimport { Compiler } from '../compiler/index.js';\nimport { __FARM_GLOBAL__ } from '../config/_global.js';\nimport {\n  DEFAULT_HMR_OPTIONS,\n  DevServerMiddleware,\n  NormalizedServerConfig,\n  UserPreviewServerConfig,\n  UserServerConfig,\n  normalizePublicDir\n} from '../config/index.js';\nimport {\n  getValidPublicPath,\n  normalizePublicPath\n} from '../config/normalize-config/normalize-output.js';\nimport { resolveHostname, resolveServerUrls } from '../utils/http.js';\nimport {\n  Logger,\n  bootstrap,\n  clearScreen,\n  normalizeBasePath,\n  printServerUrls\n} from '../utils/index.js';\nimport { FileWatcher } from '../watcher/index.js';\nimport { logError } from './error.js';\nimport { HmrEngine } from './hmr-engine.js';\nimport { hmrPing } from './middlewares/hmrPing.js';\nimport {\n  cors,\n  headers,\n  lazyCompilation,\n  proxy,\n  resources,\n  staticMiddleware\n} from './middlewares/index.js';\nimport { openBrowser } from './open.js';\nimport { Server as httpServer } from './type.js';\nimport WsServer from './ws.js';\n\n/**\n * Farm Dev Server, responsible for:\n * * parse and normalize dev server options\n * * launch http server based on options\n * * compile the project in dev mode and serve the production\n * * HMR middleware and websocket supported\n */\ninterface ServerUrls {\n  local: string[];\n  network: string[];\n}\n\ntype ErrorMap = {\n  EACCES: string;\n  EADDRNOTAVAIL: string;\n};\n\ninterface ImplDevServer {\n  createServer(options: UserServerConfig): void;\n  createDevServer(options: UserServerConfig): void;\n  createPreviewServer(options: UserServerConfig): void;\n  listen(): Promise<void>;\n  close(): Promise<void>;\n  getCompiler(): Compiler;\n}\n\nexport class Server implements ImplDevServer {\n  private _app: Koa;\n  private restart_promise: Promise<void> | null = null;\n  private compiler: Compiler | null;\n  public logger: Logger;\n\n  ws: WsServer;\n  config: NormalizedServerConfig & UserPreviewServerConfig;\n  hmrEngine?: HmrEngine;\n  server?: httpServer;\n  publicDir?: string;\n  publicPath?: string;\n  resolvedUrls?: ServerUrls;\n  watcher: FileWatcher;\n\n  constructor({\n    compiler = null,\n    logger\n  }: {\n    compiler?: Compiler | null;\n    logger: Logger;\n  }) {\n    this.compiler = compiler;\n    this.logger = logger ?? new Logger();\n\n    this.initializeKoaServer();\n\n    if (!compiler) return;\n\n    this.publicDir = normalizePublicDir(compiler?.config.config.root);\n\n    this.publicPath =\n      normalizePublicPath(\n        compiler.config.config.output.targetEnv,\n        compiler.config.config.output.publicPath,\n        logger,\n        false\n      ) || '/';\n  }\n\n  getCompiler(): Compiler {\n    return this.compiler;\n  }\n\n  app(): Koa {\n    return this._app;\n  }\n\n  async listen(): Promise<void> {\n    if (!this.server) {\n      this.logger.error('HTTP server is not created yet');\n      return;\n    }\n    const { port, open, protocol, hostname } = this.config;\n\n    const start = Date.now();\n    // compile the project and start the dev server\n    await this.compile();\n\n    // watch extra files after compile\n    this.watcher?.watchExtraFiles?.();\n\n    bootstrap(Date.now() - start, this.compiler.config);\n\n    await this.startServer(this.config);\n\n    !__FARM_GLOBAL__.__FARM_RESTART_DEV_SERVER__ &&\n      (await this.displayServerUrls());\n\n    if (open) {\n      let publicPath = getValidPublicPath(this.publicPath) || '/';\n\n      const serverUrl = `${protocol}://${hostname.name}:${port}${publicPath}`;\n      openBrowser(serverUrl);\n    }\n  }\n\n  private async compile(): Promise<void> {\n    try {\n      await this.compiler.compile();\n    } catch (err) {\n      throw new Error(logError(err) as unknown as string);\n    }\n\n    if (this.config.writeToDisk) {\n      this.compiler.writeResourcesToDisk();\n    } else {\n      this.compiler.callWriteResourcesHook();\n    }\n  }\n\n  async startServer(serverOptions: UserServerConfig) {\n    const { port, hostname } = serverOptions;\n    const listen = promisify(this.server.listen).bind(this.server);\n    try {\n      await listen(port, hostname.host);\n    } catch (error) {\n      this.handleServerError(error, port, hostname.host);\n    }\n  }\n\n  handleServerError(\n    error: Error & { code?: string },\n    port: number,\n    host: string | undefined\n  ) {\n    const errorMap: ErrorMap = {\n      EACCES: `Permission denied to use port ${port} `,\n      EADDRNOTAVAIL: `The IP address host: ${host} is not available on this machine.`\n    };\n\n    const errorMessage =\n      errorMap[error.code as keyof ErrorMap] ||\n      `An error occurred: ${error.stack} `;\n    this.logger.error(errorMessage);\n  }\n\n  async close() {\n    if (!this.server) {\n      this.logger.error('HTTP server is not created yet');\n    }\n    // the server is already closed\n    if (!this.server.listening) {\n      return;\n    }\n    const promises = [];\n    if (this.ws) {\n      promises.push(this.ws.close());\n    }\n\n    if (this.server) {\n      promises.push(new Promise((resolve) => this.server.close(resolve)));\n    }\n\n    await Promise.all(promises);\n  }\n\n  async restart(promise: () => Promise<void>) {\n    if (!this.restart_promise) {\n      this.restart_promise = promise();\n    }\n    return this.restart_promise;\n  }\n\n  private initializeKoaServer() {\n    this._app = new Koa();\n  }\n\n  public createServer(\n    options: NormalizedServerConfig & UserPreviewServerConfig\n  ) {\n    const { https, host } = options;\n    const protocol = https ? 'https' : 'http';\n    const hostname = resolveHostname(host);\n    const publicPath = getValidPublicPath(\n      this.compiler?.config.config.output?.publicPath ??\n        options?.output.publicPath\n    );\n    // TODO refactor previewServer If it's preview server, then you can't use create server. we need to create a new one because hmr is false when you preview.\n    const hmrPath = normalizeBasePath(\n      path.join(publicPath, options.hmr.path ?? DEFAULT_HMR_OPTIONS.path)\n    );\n\n    this.config = {\n      ...options,\n      port: Number(process.env.FARM_DEV_SERVER_PORT || options.port),\n      hmr: {\n        ...options.hmr,\n        path: hmrPath\n      },\n      protocol,\n      hostname\n    };\n\n    const isProxy = Object.keys(options.proxy).length;\n    if (https) {\n      if (isProxy) {\n        this.server = httpsServer.createServer(https, this._app.callback());\n      } else {\n        this.server = http2.createSecureServer(\n          {\n            maxSessionMemory: 1000,\n            ...https,\n            allowHTTP1: true\n          },\n          this._app.callback()\n        );\n      }\n    } else {\n      this.server = http.createServer(this._app.callback());\n    }\n  }\n\n  public createWebSocket() {\n    if (!this.server) {\n      throw new Error('Websocket requires a server.');\n    }\n    this.ws = new WsServer(this.server, this.config, this.hmrEngine);\n  }\n\n  private invalidateVite() {\n    // Note: path should be Farm's id, which is a relative path in dev mode,\n    // but in vite, it's a url path like /xxx/xxx.js\n    this.ws.on('vite:invalidate', ({ path, message }) => {\n      // find hmr boundary starting from the parent of the file\n      this.logger.info(`HMR invalidate: ${path}. ${message ?? ''} `);\n      const parentFiles = this.compiler.getParentFiles(path);\n      this.hmrEngine.hmrUpdate(parentFiles, true);\n    });\n  }\n\n  public async createPreviewServer(options: UserPreviewServerConfig) {\n    this.createServer(options as NormalizedServerConfig);\n\n    this.applyPreviewServerMiddlewares(this.config.middlewares);\n\n    await this.startServer(this.config);\n\n    await this.displayServerUrls(true);\n  }\n\n  public async createDevServer(options: NormalizedServerConfig) {\n    if (!this.compiler) {\n      throw new Error('DevServer requires a compiler for development mode.');\n    }\n\n    this.createServer(options);\n\n    this.hmrEngine = new HmrEngine(this.compiler, this, this.logger);\n\n    this.createWebSocket();\n\n    this.invalidateVite();\n\n    this.applyServerMiddlewares(options.middlewares);\n  }\n\n  static async resolvePortConflict(\n    normalizedDevConfig: NormalizedServerConfig,\n    logger: Logger\n  ): Promise<void> {\n    let devPort = normalizedDevConfig.port;\n    let hmrPort = normalizedDevConfig.hmr.port;\n\n    const { strictPort, host } = normalizedDevConfig;\n    const httpServer = http.createServer();\n    const isPortAvailable = (portToCheck: number) => {\n      return new Promise((resolve, reject) => {\n        const onError = async (error: { code: string }) => {\n          if (error.code === 'EADDRINUSE') {\n            clearScreen();\n            if (strictPort) {\n              httpServer.removeListener('error', onError);\n              reject(new Error(`Port ${devPort} is already in use`));\n            } else {\n              logger.warn(`Port ${devPort} is in use, trying another one...`);\n              httpServer.removeListener('error', onError);\n              resolve(false);\n            }\n          } else {\n            logger.error(`Error in httpServer: ${error} `);\n            reject(true);\n          }\n        };\n        httpServer.on('error', onError);\n        httpServer.on('listening', () => {\n          httpServer.close();\n          resolve(true);\n        });\n        httpServer.listen(portToCheck, host as string);\n      });\n    };\n\n    let isPortAvailableResult = await isPortAvailable(devPort);\n\n    while (isPortAvailableResult === false) {\n      if (typeof normalizedDevConfig.hmr === 'object') {\n        normalizedDevConfig.hmr.port = ++hmrPort;\n      }\n\n      normalizedDevConfig.port = ++devPort;\n      isPortAvailableResult = await isPortAvailable(devPort);\n    }\n  }\n\n  /**\n   * Add listening files for root manually\n   *\n   * > listening file with root must as file.\n   *\n   * @param root\n   * @param deps\n   */\n\n  addWatchFile(root: string, deps: string[]): void {\n    this.getCompiler().addExtraWatchFile(root, deps);\n  }\n\n  applyMiddlewares(internalMiddlewares?: DevServerMiddleware[]) {\n    internalMiddlewares.forEach((middleware) => {\n      const middlewareImpl = middleware(this);\n\n      if (middlewareImpl) {\n        if (Array.isArray(middlewareImpl)) {\n          middlewareImpl.forEach((m) => {\n            this._app.use(m);\n          });\n        } else {\n          this._app.use(middlewareImpl);\n        }\n      }\n    });\n  }\n\n  setCompiler(compiler: Compiler) {\n    this.compiler = compiler;\n  }\n\n  private applyPreviewServerMiddlewares(\n    middlewares?: DevServerMiddleware[]\n  ): void {\n    const internalMiddlewares = [\n      ...(middlewares || []),\n      compression,\n      proxy,\n      staticMiddleware\n    ];\n    this.applyMiddlewares(internalMiddlewares as DevServerMiddleware[]);\n  }\n\n  private applyServerMiddlewares(middlewares?: DevServerMiddleware[]): void {\n    const internalMiddlewares = [\n      ...(middlewares || []),\n      hmrPing,\n      headers,\n      lazyCompilation,\n      cors,\n      resources,\n      proxy\n    ];\n\n    this.applyMiddlewares(internalMiddlewares as DevServerMiddleware[]);\n  }\n\n  private async displayServerUrls(showPreviewFlag = false) {\n    let publicPath = getValidPublicPath(\n      this.compiler\n        ? this.compiler.config.config.output?.publicPath\n        : this.config.output.publicPath\n    );\n\n    this.resolvedUrls = resolveServerUrls(this.server, this.config, publicPath);\n\n    if (this.resolvedUrls) {\n      printServerUrls(this.resolvedUrls, this.logger, showPreviewFlag);\n    } else {\n      throw new Error('cannot print server URLs with Server Error.');\n    }\n  }\n}\n"]}
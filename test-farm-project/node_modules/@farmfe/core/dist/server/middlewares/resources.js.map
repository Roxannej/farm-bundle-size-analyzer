{"version":3,"file":"resources.js","sourceRoot":"","sources":["../../../src/server/middlewares/resources.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Serve resources that stored in memory. This middleware will be enabled when server.writeToDisk is false.\n */\n\nimport { ReadStream, existsSync, readFileSync, statSync } from 'node:fs';\nimport path, { extname } from 'node:path';\nimport { Context, Middleware, Next } from 'koa';\nimport koaStatic from 'koa-static';\nimport { Compiler } from '../../compiler/index.js';\nimport {\n  generateFileTree,\n  generateFileTreeHtml,\n  stripQueryAndHash\n} from '../../utils/index.js';\nimport { Server } from '../index.js';\n\ninterface RealResourcePath {\n  resourcePath: string;\n  rawPath: string;\n  resource: Buffer;\n}\n\nfunction normalizePathByPublicPath(publicPath: string, resourcePath: string) {\n  const base = publicPath.match(/^https?:\\/\\//) ? '' : publicPath;\n  let resourceWithoutPublicPath = resourcePath;\n\n  if (base && resourcePath.startsWith(base)) {\n    resourcePath = resourcePath.replace(new RegExp(`([^/]+)${base}`), '$1/');\n    resourceWithoutPublicPath = resourcePath.slice(base.length);\n  }\n\n  return { resourceWithoutPublicPath, fullPath: resourcePath };\n}\n\nfunction outputFilesMiddleware(compiler: Compiler): Middleware {\n  return async (ctx: Context, next: Next) => {\n    if (ctx.path === '/_output_files') {\n      const files = Object.keys(compiler.resources()).sort();\n      const fileTree = generateFileTree(files);\n      ctx.type = '.html';\n      ctx.body = generateFileTreeHtml(fileTree);\n    } else {\n      await next();\n    }\n  };\n}\n\nfunction findResource(\n  paths: string[],\n  compiler: Compiler,\n  publicPath: string\n): true | undefined | RealResourcePath {\n  for (const resourcePath of new Set(paths)) {\n    const { resourceWithoutPublicPath } = normalizePathByPublicPath(\n      publicPath,\n      resourcePath\n    );\n\n    const resource = compiler.resource(resourceWithoutPublicPath);\n\n    if (resource) {\n      return {\n        resource,\n        resourcePath: resourceWithoutPublicPath,\n        rawPath: resourcePath\n      };\n    }\n  }\n}\n\nexport function resourcesMiddleware(compiler: Compiler, serverContext: Server) {\n  return async (ctx: Context, next: Next) => {\n    await next();\n    if (ctx.method !== 'HEAD' && ctx.method !== 'GET') return;\n    const hasHtmlPathWithPublicDir = path.resolve(\n      serverContext.publicDir,\n      'index.html'\n    );\n\n    let isSkipPublicHtml;\n    if (ctx.body instanceof ReadStream) {\n      const readStream = ctx.body;\n      isSkipPublicHtml = readStream.path === hasHtmlPathWithPublicDir;\n    }\n\n    // the response is already handled\n    if ((ctx.body || ctx.status !== 404) && !isSkipPublicHtml) return;\n\n    const { config, publicPath } = serverContext;\n    // if compiler is compiling, wait for it to finish\n    if (compiler.compiling) {\n      await new Promise((resolve) => {\n        compiler.onUpdateFinish(() => resolve(undefined));\n      });\n    }\n    // Fallback to index.html if the resource is not found\n    const url = ctx.url?.slice(1) || 'index.html'; // remove leading slash\n\n    let stripQueryAndHashUrl = stripQueryAndHash(url);\n    const resourceResult = findResource(\n      [url, stripQueryAndHashUrl],\n      compiler,\n      publicPath\n    );\n\n    if (resourceResult === true) {\n      return;\n    }\n\n    if (resourceResult) {\n      ctx.type = extname(ctx?.path?.slice?.(1) || 'index.html');\n      ctx.body = resourceResult.resource;\n      return;\n    }\n\n    const { fullPath, resourceWithoutPublicPath } = normalizePathByPublicPath(\n      publicPath,\n      stripQueryAndHashUrl\n    );\n\n    // if resource is image or font, try it in local file system to be compatible with vue\n    {\n      // try local file system\n      const absPath = path.join(\n        compiler.config.config.root,\n        resourceWithoutPublicPath\n      );\n      // const mimeStr = mime.lookup(absPath);\n\n      if (\n        existsSync(absPath) &&\n        statSync(absPath).isFile()\n        // mimeStr &&\n        // (mimeStr.startsWith('image') || mimeStr.startsWith('font'))\n      ) {\n        ctx.type = extname(fullPath);\n        ctx.body = readFileSync(absPath);\n        return;\n      }\n\n      // try local file system with publicDir\n      const absPathPublicDir = path.resolve(\n        compiler.config.config.root,\n        compiler.config.config.assets.publicDir,\n        resourceWithoutPublicPath\n      );\n\n      if (existsSync(absPathPublicDir) && statSync(absPathPublicDir).isFile()) {\n        ctx.type = extname(fullPath);\n        ctx.body = readFileSync(absPathPublicDir);\n        return;\n      }\n    }\n\n    // if resource is not found and spa is not disabled, find the closest index.html from resourcePath\n    {\n      // if request mime is not html, return 404\n      if (!ctx.accepts('html')) {\n        ctx.status = 404;\n      } else if (config.spa !== false) {\n        const pathComps = resourceWithoutPublicPath.split('/');\n\n        while (pathComps.length > 0) {\n          const pathStr = pathComps.join('/') + '.html';\n          const resource = compiler.resources()[pathStr];\n\n          if (resource) {\n            ctx.type = '.html';\n            ctx.body = resource;\n            return;\n          }\n\n          pathComps.pop();\n        }\n\n        const indexHtml = compiler.resources()['index.html'];\n\n        if (indexHtml) {\n          ctx.type = '.html';\n          ctx.body = indexHtml;\n          return;\n        }\n      } else {\n        // cannot find index.html, return 404\n        ctx.status = 404;\n      }\n    }\n  };\n}\n\nexport function resources(devSeverContext: Server): Middleware | Middleware[] {\n  const middlewares = [outputFilesMiddleware(devSeverContext.getCompiler())];\n  if (!devSeverContext.config.writeToDisk) {\n    middlewares.push(\n      resourcesMiddleware(devSeverContext.getCompiler(), devSeverContext)\n    );\n  } else {\n    middlewares.push(\n      koaStatic(devSeverContext.getCompiler().config.config.output.path, {\n        extensions: ['html']\n      })\n    );\n  }\n\n  middlewares.push(koaStatic(devSeverContext.publicDir));\n  return middlewares;\n}\n"]}
{"version":3,"file":"static.js","sourceRoot":"","sources":["../../../src/server/middlewares/static.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,IAAI,CAAC;AACpB,OAAO,IAAI,EAAE,EAAE,QAAQ,EAAE,MAAM,MAAM,CAAC;AAEtC,OAAO,KAAK,MAAM,YAAY,CAAC;AAG/B,MAAM,UAAU,gBAAgB,CAAC,gBAAwB;IACvD,MAAM,EAAE,MAAM,EAAE,GAAG,gBAAgB,CAAC;IAEpC,MAAM,gBAAgB,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE;QAC7C,iEAAiE;QACjE,UAAU,EAAE,CAAC,MAAM,CAAC;KACrB,CAAC,CAAC;IAEH,WAAW;IACX,MAAM,kBAAkB,GAAe,KAAK,EAAE,GAAY,EAAE,IAAU,EAAE,EAAE;QACxE,MAAM,IAAI,EAAE,CAAC;QAEb,qEAAqE;QACrE,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE;YACnC,GAAG,CAAC,IAAI,GAAG,MAAM,CAAC;YAClB,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC,CAAC;SACzE;IACH,CAAC,CAAC;IAEF,OAAO,KAAK,EAAE,GAAY,EAAE,IAAU,EAAE,EAAE;QACxC,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE;YAClC,MAAM,IAAI,EAAE,CAAC;YACb,OAAO;SACR;QAED,MAAM,WAAW,GAAG,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC;QACtC,IAAI,YAAY,GAAG,WAAW,CAAC;QAE/B,IAAI,WAAW,EAAE;YACf,IAAI,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;gBAC5C,YAAY,GAAG,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;aACvE;iBAAM;gBACL,MAAM,UAAU,GAAG,QAAQ,CACzB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,EACnD,MAAM,CAAC,OAAO,CACf,CAAC;gBACF,YAAY,GAAG,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;aAC7D;SACF;QAED,GAAG,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,YAAY,EAAE,CAAC;QAEtC,IAAI;YACF,oCAAoC;YACpC,MAAM,gBAAgB,CAAC,GAAG,EAAE,KAAK,IAAI,EAAE;gBACrC,uGAAuG;gBACvG,MAAM,kBAAkB,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACtC,CAAC,CAAC,CAAC;SACJ;QAAC,OAAO,KAAK,EAAE;YACd,gBAAgB,CAAC,MAAM,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;YACpE,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC;SAClB;IACH,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import fs from 'fs';\nimport path, { relative } from 'path';\nimport { Context, Middleware, Next } from 'koa';\nimport serve from 'koa-static';\nimport { Server } from '../index.js';\n\nexport function staticMiddleware(devServerContext: Server): Middleware {\n  const { config } = devServerContext;\n\n  const staticMiddleware = serve(config.distDir, {\n    // multiple page maybe receive \"about\", should auto try extension\n    extensions: ['html']\n  });\n\n  // Fallback\n  const fallbackMiddleware: Middleware = async (ctx: Context, next: Next) => {\n    await next();\n\n    // If staticMiddleware doesn't find the file, try to serve index.html\n    if (ctx.status === 404 && !ctx.body) {\n      ctx.type = 'html';\n      ctx.body = fs.createReadStream(path.join(config.distDir, 'index.html'));\n    }\n  };\n\n  return async (ctx: Context, next: Next) => {\n    if (ctx.status !== 404 || ctx.body) {\n      await next();\n      return;\n    }\n\n    const requestPath = ctx.request?.path;\n    let modifiedPath = requestPath;\n\n    if (requestPath) {\n      if (config.output.publicPath.startsWith('/')) {\n        modifiedPath = requestPath.substring(config.output.publicPath.length);\n      } else {\n        const publicPath = relative(\n          path.join(config.distDir, config.output.publicPath),\n          config.distDir\n        );\n        modifiedPath = requestPath.substring(publicPath.length + 1);\n      }\n    }\n\n    ctx.request.path = `/${modifiedPath}`;\n\n    try {\n      // Serve middleware for static files\n      await staticMiddleware(ctx, async () => {\n        // If staticMiddleware doesn't find the file or refresh current page router, execute fallbackMiddleware\n        await fallbackMiddleware(ctx, next);\n      });\n    } catch (error) {\n      devServerContext.logger.error('Static file handling error:', error);\n      ctx.status = 500;\n    }\n  };\n}\n"]}
{"version":3,"file":"lazy-compilation.js","sourceRoot":"","sources":["../../../src/server/middlewares/lazy-compilation.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Lazy compilation middleware. Using the same logic as HMR middleware\n */\n\nimport { relative } from 'node:path';\nimport { Context, Middleware, Next } from 'koa';\n\nimport {\n  VIRTUAL_FARM_DYNAMIC_IMPORT_SUFFIX,\n  bold,\n  checkClearScreen,\n  cyan,\n  getDynamicResources,\n  green\n} from '../../index.js';\nimport { Server } from '../index.js';\n\nimport { existsSync } from 'node:fs';\nimport { getValidPublicPath } from '../../config/normalize-config/normalize-output.js';\nimport { logError } from '../error.js';\n\nexport function lazyCompilation(devSeverContext: Server): Middleware {\n  const compiler = devSeverContext.getCompiler();\n\n  if (!compiler.config.config?.lazyCompilation) {\n    return;\n  }\n\n  return async (ctx: Context, next: Next) => {\n    const publicPath = getValidPublicPath(\n      compiler.config.config?.output?.publicPath\n    );\n\n    if (ctx.path === `${publicPath || '/'}__lazy_compile`) {\n      const paths = (ctx.query.paths as string).split(',');\n      const pathsStr = paths\n        .map((p) => {\n          if (\n            p.startsWith('/') &&\n            !p.endsWith(VIRTUAL_FARM_DYNAMIC_IMPORT_SUFFIX) &&\n            !existsSync(p)\n          ) {\n            return p;\n          }\n          const resolvedPath = compiler.transformModulePath(\n            compiler.config.config.root,\n            p\n          );\n          return relative(compiler.config.config.root, resolvedPath);\n        })\n        .join(', ');\n      checkClearScreen(compiler.config.config);\n      devSeverContext.logger.info(`Lazy compiling ${bold(cyan(pathsStr))}`);\n      const start = Date.now();\n      // sync update when node is true\n      let result;\n      try {\n        // sync regenerate resources\n        result = await compiler.update(paths, true, false, false);\n      } catch (e) {\n        logError(e);\n      }\n\n      if (!result) {\n        return;\n      }\n\n      if (ctx.query.node || devSeverContext.config.writeToDisk) {\n        compiler.writeResourcesToDisk();\n      }\n\n      devSeverContext.logger.info(\n        `${bold(green(`âœ“`))} Lazy compilation done(${bold(\n          cyan(pathsStr)\n        )}) in ${bold(green(`${Date.now() - start}ms`))}.`\n      );\n\n      if (result) {\n        const { dynamicResources, dynamicModuleResourcesMap } =\n          getDynamicResources(result.dynamicResourcesMap);\n\n        const returnObj = `{\n          \"dynamicResources\": ${JSON.stringify(dynamicResources)},\n          \"dynamicModuleResourcesMap\": ${JSON.stringify(\n            dynamicModuleResourcesMap\n          )}\n        }`;\n        const code = !ctx.query.node\n          ? `export default ${returnObj}`\n          : returnObj;\n        ctx.type = !ctx.query.node\n          ? 'application/javascript'\n          : 'application/json';\n        ctx.body = code;\n        // enable cors\n        ctx.set('Access-Control-Allow-Origin', '*');\n        ctx.set('Access-Control-Allow-Methods', '*');\n        ctx.set('Access-Control-Allow-Headers', '*');\n      } else {\n        throw new Error(`Lazy compilation result not found for paths ${paths}`);\n      }\n    } else {\n      await next();\n    }\n  };\n}\n"]}
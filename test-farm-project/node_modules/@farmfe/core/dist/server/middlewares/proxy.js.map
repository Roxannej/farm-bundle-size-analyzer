{"version":3,"file":"proxy.js","sourceRoot":"","sources":["../../../src/server/middlewares/proxy.ts"],"names":[],"mappings":"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","sourcesContent":["import { Options, createProxyMiddleware } from 'http-proxy-middleware';\nimport { Context, Middleware, Next } from 'koa';\n\nimport { UserConfig, UserHmrConfig } from '../../config/types.js';\nimport { Logger } from '../../utils/logger.js';\nimport type { Server } from '../index.js';\n\nexport function useProxy(\n  options: UserConfig['server'],\n  devSeverContext: Server,\n  logger: Logger\n) {\n  const proxyOption = options['proxy'];\n  for (const path of Object.keys(proxyOption)) {\n    let opts = proxyOption[path] as Options;\n\n    if (typeof opts === 'string') {\n      opts = { target: opts, changeOrigin: true };\n    }\n\n    const proxyMiddleware = createProxyMiddleware(opts);\n    const server = devSeverContext.server;\n    const hmrOptions = options.hmr as UserHmrConfig;\n    if (server) {\n      server.on('upgrade', (req, socket: any, head) => {\n        if (req.url === hmrOptions.path) return;\n        for (const path in options.proxy) {\n          const opts = proxyOption[path] as Options;\n          if (\n            opts.ws ||\n            opts.target?.toString().startsWith('ws:') ||\n            opts.target?.toString().startsWith('wss:')\n          ) {\n            const proxy = createProxyMiddleware(opts);\n            if (opts.pathRewrite) {\n              const fromPath = Object.keys(opts.pathRewrite)[0];\n              const toPath: string = (\n                opts.pathRewrite as { [regexp: string]: string }\n              )[fromPath];\n              req.url = rewritePath(req.url, fromPath, toPath);\n            }\n            proxy.upgrade(req, socket, head);\n            return;\n          }\n        }\n      });\n    }\n\n    const errorHandlerMiddleware = async (ctx: Context, next: Next) => {\n      try {\n        await new Promise<void>((resolve, reject) => {\n          proxyMiddleware(ctx.req, ctx.res, (err) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve();\n            }\n          });\n        });\n        await next();\n      } catch (err) {\n        logger.error(`Error in proxy for path ${path}: \\n ${err.stack}`);\n      }\n    };\n\n    try {\n      if (path.length > 0) {\n        const pathRegex = new RegExp(path);\n        const app = devSeverContext.app();\n        app.use((ctx, next) => {\n          if (pathRegex.test(ctx.path)) {\n            return errorHandlerMiddleware(ctx, next);\n          }\n          return next();\n        });\n      }\n    } catch (err) {\n      logger.error(`Error setting proxy for path ${path}: \\n ${err.stack}`);\n    }\n  }\n}\n\nexport function proxy(devSeverContext: Server): Middleware {\n  const { config, logger } = devSeverContext;\n  if (!config.proxy) {\n    return;\n  }\n\n  useProxy(config, devSeverContext, logger);\n}\n\nfunction rewritePath(path: string, fromPath: RegExp | string, toPath: string) {\n  if (fromPath instanceof RegExp) {\n    return path.replace(fromPath, toPath);\n  } else {\n    return path.replace(new RegExp(fromPath), toPath);\n  }\n}\n"]}
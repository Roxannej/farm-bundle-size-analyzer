{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { readFileSync } from 'node:fs';\n\nimport { cac } from 'cac';\nimport { getOptionFromBuildOption } from './config.js';\nimport {\n  handleAsyncOperationErrors,\n  preventExperimentalWarning,\n  resolveCliConfig,\n  resolveCommandOptions,\n  resolveCore\n} from './utils.js';\n\nimport { FarmCLIOptions } from '@farmfe/core';\nimport type {\n  FarmCLIBuildOptions,\n  FarmCLIPreviewOptions,\n  FarmCLIServerOptions,\n  GlobalFarmCLIOptions,\n  ICleanOptions\n} from './types.js';\n\nconst { version } = JSON.parse(\n  readFileSync(new URL('../package.json', import.meta.url)).toString()\n);\n\nconst cli = cac('farm');\n\n// common command\ncli\n  .option('-c, --config <file>', 'use specified config file')\n  .option('-m, --mode <mode>', 'set env mode')\n  .option('--base <path>', 'public base path')\n  .option('--clearScreen', 'allow/disable clear screen when logging', {\n    default: true\n  });\n\n// dev command\ncli\n  .command(\n    '[root]',\n    'Compile the project in dev mode and serve it with farm dev server'\n  )\n  .alias('start')\n  .alias('dev')\n  .option('-l, --lazy', 'lazyCompilation')\n  .option('--host <host>', 'specify host')\n  .option('--port <port>', 'specify port')\n  .option('--open', 'open browser on server start')\n  .option('--hmr', 'enable hot module replacement')\n  .option('--cors', 'enable cors')\n  .option('--strictPort', 'specified port is already in use, exit with error')\n  .action(\n    async (\n      rootPath: string,\n      options: FarmCLIServerOptions & GlobalFarmCLIOptions\n    ) => {\n      const { root, configPath } = resolveCliConfig(rootPath, options);\n      const resolveOptions = resolveCommandOptions(options);\n\n      const defaultOptions: FarmCLIOptions = {\n        root,\n        compilation: {\n          lazyCompilation: options.lazy\n        },\n        server: resolveOptions,\n        clearScreen: options.clearScreen,\n        configPath,\n        mode: options.mode\n      };\n\n      if (options.base) {\n        defaultOptions.compilation.output = {\n          publicPath: options.base\n        };\n      }\n\n      const { start } = await resolveCore();\n      handleAsyncOperationErrors(\n        start(defaultOptions),\n        'Failed to start server'\n      );\n    }\n  );\n\n// build command\ncli\n  .command('build [root]', 'compile the project in production mode')\n  .option('-o, --outDir <dir>', 'output directory')\n  .option('-i, --input <file>', 'input file path')\n  .option('-w, --watch', 'watch file change')\n  .option('--target <target>', 'transpile targetEnv node, browser')\n  .option('--format <format>', 'transpile format esm, commonjs')\n  .option('--sourcemap', 'output source maps for build')\n  .option('--treeShaking', 'Eliminate useless code without side effects')\n  .option('--minify', 'code compression at build time')\n  .action(\n    async (\n      rootPath: string,\n      options: FarmCLIBuildOptions & GlobalFarmCLIOptions\n    ) => {\n      const { root, configPath } = resolveCliConfig(rootPath, options);\n\n      const defaultOptions = {\n        root,\n        configPath,\n        ...getOptionFromBuildOption(options)\n      };\n\n      const { build } = await resolveCore();\n      handleAsyncOperationErrors(build(defaultOptions), 'error during build');\n    }\n  );\n\ncli\n  .command('watch [root]', 'watch file change')\n  .option('-o, --outDir <dir>', 'output directory')\n  .option('-i, --input <file>', 'input file path')\n  .option('--target <target>', 'transpile targetEnv node, browser')\n  .option('--format <format>', 'transpile format esm, commonjs')\n  .option('--sourcemap', 'output source maps for build')\n  .option('--treeShaking', 'Eliminate useless code without side effects')\n  .option('--minify', 'code compression at build time')\n  .action(\n    async (\n      rootPath: string,\n      options: FarmCLIBuildOptions & GlobalFarmCLIOptions\n    ) => {\n      const { root, configPath } = resolveCliConfig(rootPath, options);\n\n      const defaultOptions = {\n        root,\n        configPath,\n        ...getOptionFromBuildOption(options)\n      };\n\n      const { watch } = await resolveCore();\n      handleAsyncOperationErrors(\n        watch(defaultOptions),\n        'error during watch project'\n      );\n    }\n  );\n\ncli\n  .command('preview [root]', 'compile the project in watch mode')\n  .option('--port <port>', 'specify port')\n  .option('--open', 'open browser on server preview start')\n  .action(\n    async (\n      rootPath: string,\n      options: FarmCLIPreviewOptions & GlobalFarmCLIOptions\n    ) => {\n      const { root, configPath } = resolveCliConfig(rootPath, options);\n\n      const resolveOptions = resolveCommandOptions(options);\n      const defaultOptions: FarmCLIOptions = {\n        root,\n        mode: options.mode,\n        server: resolveOptions,\n        configPath,\n        port: options.port,\n        clearScreen: options.clearScreen\n      };\n\n      if (options.base) {\n        defaultOptions.compilation.output = {\n          publicPath: options.base\n        };\n      }\n\n      const { preview } = await resolveCore();\n      handleAsyncOperationErrors(\n        preview(defaultOptions),\n        'Failed to start preview server'\n      );\n    }\n  );\n\ncli\n  .command('clean [path]', 'Clean up the cache built incrementally')\n  .option(\n    '--recursive',\n    'Recursively search for node_modules directories and clean them'\n  )\n  .action(async (rootPath: string, options: ICleanOptions) => {\n    const { root } = resolveCliConfig(rootPath, options);\n    const { clean } = await resolveCore();\n\n    try {\n      await clean(root, options?.recursive);\n    } catch (e) {\n      const { Logger } = await import('@farmfe/core');\n      const logger = new Logger();\n      logger.error(`Failed to clean cache: \\n ${e.stack}`);\n      process.exit(1);\n    }\n  });\n\n// Listening for unknown command\ncli.on('command:*', async () => {\n  const { Logger } = await import('@farmfe/core');\n  const logger = new Logger();\n  logger.error(\n    'Unknown command place Run \"farm --help\" to see available commands'\n  );\n});\n\n// warning::: use mdn browser compatibility data with experimental warning in terminal so prevent experimental warning\n// we don't use it in `@farmfe/core` package because\n// we need to prevent it in cli package but we don't prevent it in core package\n// We only keep the original code environment.\npreventExperimentalWarning();\n\ncli.help();\n\ncli.version(version);\n\ncli.parse();\n"]}
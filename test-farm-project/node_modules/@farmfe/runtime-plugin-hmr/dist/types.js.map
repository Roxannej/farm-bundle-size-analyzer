{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { Resource } from '@farmfe/runtime';\n\n// export interface HmrUpdatePacket {\n//   id: string;\n// }\ntype ModuleMap = Record<\n  string,\n  (\n    module: any,\n    exports: any,\n    require: (id: string) => any,\n    dynamicRequire: (id: string) => Promise<any>\n  ) => void\n>;\nexport interface HmrUpdateResult {\n  added: string[];\n  changed: string[];\n  removed: string[];\n\n  // closest boundary modules which are related to added or changed\n  boundaries: Record<string, string[][]>;\n  // modules which are added or changed\n  modules: ModuleMap;\n  dynamicResources: Resource[] | null;\n  dynamicModuleResourcesMap: Record<string, number[]> | null;\n}\n\nexport interface RawHmrUpdateResult {\n  added: string[];\n  changed: string[];\n  removed: string[];\n  boundaries: Record<string, string[][]>;\n  immutableModules: string;\n  mutableModules: string;\n  dynamicResources: Resource[] | null;\n  dynamicModuleResourcesMap: Record<string, number[]> | null;\n}\n\n// the same as Vite, see LICENSE. modified by @farmfe\nexport type HMRPayload =\n  | FarmHmrPayload\n  | ConnectedPayload\n  | UpdatePayload\n  | FullReloadPayload\n  | CustomPayload\n  | ErrorPayload\n  | PrunePayload\n  | ClosingPayload;\n\nexport interface FarmHmrPayload {\n  type: 'farm-update';\n  result: RawHmrUpdateResult;\n}\n\nexport interface ConnectedPayload {\n  type: 'connected';\n}\n\nexport interface UpdatePayload {\n  type: 'update';\n  updates: Update[];\n}\n\nexport interface Update {\n  type: 'js-update' | 'css-update';\n  path: string;\n  acceptedPath: string;\n  timestamp: number;\n  /**\n   * @experimental internal\n   */\n  explicitImportRequired?: boolean | undefined;\n}\n\nexport interface PrunePayload {\n  type: 'prune';\n  paths: string[];\n}\n\nexport interface FullReloadPayload {\n  type: 'full-reload';\n  path?: string;\n}\n\nexport interface CustomPayload {\n  type: 'custom';\n  event: string;\n  data?: any;\n}\n\nexport interface ClosingPayload {\n  type: 'closing';\n}\n\nexport interface ErrorPayload {\n  type: 'error';\n  err: {\n    [name: string]: any;\n    message: string;\n    stack: string;\n    id?: string;\n    frame?: string;\n    plugin?: string;\n    pluginCode?: string;\n    loc?: {\n      file?: string;\n      line: number;\n      column: number;\n    };\n  };\n  overlay: boolean;\n}\n"]}
{"version":3,"file":"plugin.js","sourceRoot":"","sources":["../src/plugin.ts"],"names":[],"mappings":"AAgCA,uDAAuD;AACvD,MAAM,OAAO,0BAA0B;IAGrC,YAAY,OAA4B;QAFxC,YAAO,GAAwB,EAAE,CAAC;QAGhC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAED,2BAA2B;IAC3B,oBAAoB;IACpB,UAAU,CACR,QAAkD,EAClD,GAAG,IAAW;QAGd,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;YACjC,MAAM,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;YAE9B,IAAI,IAAI,EAAE;gBACR,kCAAkC;gBAClC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;aAC1B;SACF;IACH,CAAC;IAED,2BAA2B;IAC3B,2BAA2B;IAC3B,QAAQ,CACN,QAAkD,EAClD,GAAG,IAAW;QAGd,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;YACjC,MAAM,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;YAE9B,IAAI,IAAI,EAAE;gBACR,iDAAiD;gBACjD,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBAExC,IAAI,MAAM,EAAE;oBACV,OAAO,MAAW,CAAC;iBACpB;aACF;SACF;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;CACF","sourcesContent":["import { Module } from './module.js';\nimport type { ModuleSystem } from './module-system.js';\nimport type { Resource } from './resource-loader.js';\n\nexport interface ResourceLoadResult {\n  success: boolean;\n  retryWithDefaultResourceLoader?: boolean;\n  err?: Error;\n}\n\nexport interface FarmRuntimePlugin {\n  // plugin name\n  name: string;\n  // invoked when the module system is bootstrapped\n  bootstrap?: (moduleSystem: ModuleSystem) => void | Promise<void>;\n  // invoked after new module instances are created\n  moduleCreated?: (module: Module) => void | Promise<void>;\n  // invoked after module initialization functions are called\n  moduleInitialized?: (module: Module) => void | Promise<void>;\n  // invoked after module caches are read, return true to skip cache reading\n  readModuleCache?: (module: Module) => boolean | Promise<boolean>;\n  // called when module is not found\n  moduleNotFound?: (moduleId: string) => void | Promise<void>;\n  // called when loading resources, custom your resource loading in this hook.\n  // return { success: true } to indicate that this resources have been loaded successfully.\n  // return { success: false, retryWithDefaultResourceLoader: true } to indicate that this resources have not been loaded successfully and should be retried with the default resource loader.\n  loadResource?: (\n    resource: Resource,\n    targetEnv: 'browser' | 'node'\n  ) => Promise<ResourceLoadResult>;\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport class FarmRuntimePluginContainer {\n  plugins: FarmRuntimePlugin[] = [];\n\n  constructor(plugins: FarmRuntimePlugin[]) {\n    this.plugins = plugins;\n  }\n\n  // TODO support async later\n  // async hookSerial(\n  hookSerial(\n    hookName: Exclude<keyof FarmRuntimePlugin, 'name'>,\n    ...args: any[]\n  ): // ): Promise<void> {\n  void {\n    for (const plugin of this.plugins) {\n      const hook = plugin[hookName];\n\n      if (hook) {\n        // await hook.apply(plugin, args);\n        hook.apply(plugin, args);\n      }\n    }\n  }\n\n  // TODO support async later\n  // async hookBail<T = any>(\n  hookBail<T = any>(\n    hookName: Exclude<keyof FarmRuntimePlugin, 'name'>,\n    ...args: any[]\n  ): // ): Promise<T> {\n  T | undefined {\n    for (const plugin of this.plugins) {\n      const hook = plugin[hookName];\n\n      if (hook) {\n        // const result = await hook.apply(plugin, args);\n        const result = hook.apply(plugin, args);\n\n        if (result) {\n          return result as T;\n        }\n      }\n    }\n    return undefined;\n  }\n}\n"]}